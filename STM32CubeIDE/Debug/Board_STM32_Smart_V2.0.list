
Board_STM32_Smart_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800696c  0800696c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  0800696c  0800696c  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800696c  0800696c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006970  08006970  00016970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08006974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bec  2000003c  080069b0  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c28  080069b0  00021c28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a6f  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042cf  00000000  00000000  00040ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00044da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001788  00000000  00000000  000466b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aca7  00000000  00000000  00047e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e593  00000000  00000000  00062adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000989dd  00000000  00000000  00081072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119a4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a18  00000000  00000000  00119aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000003c 	.word	0x2000003c
 800012c:	00000000 	.word	0x00000000
 8000130:	080068bc 	.word	0x080068bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000040 	.word	0x20000040
 800014c:	080068bc 	.word	0x080068bc

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2uiz>:
 80006f8:	0042      	lsls	r2, r0, #1
 80006fa:	d20e      	bcs.n	800071a <__aeabi_f2uiz+0x22>
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000700:	d30b      	bcc.n	800071a <__aeabi_f2uiz+0x22>
 8000702:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d409      	bmi.n	8000720 <__aeabi_f2uiz+0x28>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2uiz+0x32>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d102      	bne.n	8000730 <__aeabi_f2uiz+0x38>
 800072a:	f04f 30ff 	mov.w	r0, #4294967295
 800072e:	4770      	bx	lr
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <SetMoveState>:
#include "cmsis_os.h"
//==============================================================================

//==============================================================================
static CarouselMotorResult SetMoveState(MotorDriverT* driver, MotorDriverState state)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	70fb      	strb	r3, [r7, #3]
	switch((uint8_t)state)
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d018      	beq.n	800077c <SetMoveState+0x44>
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11f      	bne.n	800078e <SetMoveState+0x56>
	{
		case MotorDriverStateEnable:
			if (driver->Diraction == MotorDriverMoveDiractionForward)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8000754:	2b01      	cmp	r3, #1
 8000756:	d108      	bne.n	800076a <SetMoveState+0x32>
			{
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000758:	2108      	movs	r1, #8
 800075a:	480f      	ldr	r0, [pc, #60]	; (8000798 <SetMoveState+0x60>)
 800075c:	f002 f99c 	bl	8002a98 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000760:	2104      	movs	r1, #4
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <SetMoveState+0x60>)
 8000764:	f002 f8f6 	bl	8002954 <HAL_TIM_PWM_Start>
			else
			{
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
			}
			break;
 8000768:	e011      	b.n	800078e <SetMoveState+0x56>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800076a:	2104      	movs	r1, #4
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <SetMoveState+0x60>)
 800076e:	f002 f993 	bl	8002a98 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000772:	2108      	movs	r1, #8
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <SetMoveState+0x60>)
 8000776:	f002 f8ed 	bl	8002954 <HAL_TIM_PWM_Start>
			break;
 800077a:	e008      	b.n	800078e <SetMoveState+0x56>
			
		case MotorDriverStateDisable:
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800077c:	2104      	movs	r1, #4
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <SetMoveState+0x60>)
 8000780:	f002 f98a 	bl	8002a98 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000784:	2108      	movs	r1, #8
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <SetMoveState+0x60>)
 8000788:	f002 f986 	bl	8002a98 <HAL_TIM_PWM_Stop>
			break;
 800078c:	bf00      	nop
	}
	
	return CarouselMotorResultAccept;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20001b10 	.word	0x20001b10

0800079c <SetDriverState>:
//==============================================================================
static CarouselMotorResult SetDriverState(MotorDriverT* driver, MotorDriverState state)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
	switch((uint8_t)state)
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d008      	beq.n	80007c0 <SetDriverState+0x24>
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d10d      	bne.n	80007ce <SetDriverState+0x32>
	{
		case MotorDriverStateEnable: MOTOR1_ENABLE_GPIO_Port->ODR &= ~MOTOR1_ENABLE_Pin; break;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <SetDriverState+0x40>)
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	4a09      	ldr	r2, [pc, #36]	; (80007dc <SetDriverState+0x40>)
 80007b8:	f023 0320 	bic.w	r3, r3, #32
 80007bc:	60d3      	str	r3, [r2, #12]
 80007be:	e006      	b.n	80007ce <SetDriverState+0x32>
		case MotorDriverStateDisable: MOTOR1_ENABLE_GPIO_Port->ODR |= MOTOR1_ENABLE_Pin; break;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <SetDriverState+0x40>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	4a05      	ldr	r2, [pc, #20]	; (80007dc <SetDriverState+0x40>)
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	60d3      	str	r3, [r2, #12]
 80007cc:	bf00      	nop
	}
	return CarouselMotorResultAccept;
 80007ce:	2300      	movs	r3, #0
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40010800 	.word	0x40010800

080007e0 <SetPWMHandlerState>:
//==============================================================================
CarouselMotorResult SetPWMHandlerState(MotorDriverT* driver, MotorDriverState state)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
	switch((uint8_t)state)
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d00a      	beq.n	8000808 <SetPWMHandlerState+0x28>
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d111      	bne.n	800081a <SetPWMHandlerState+0x3a>
	{
		case MotorDriverStateEnable: htim3.Instance->DIER |= TIM_DIER_UIE; break;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <SetPWMHandlerState+0x48>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <SetPWMHandlerState+0x48>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f042 0201 	orr.w	r2, r2, #1
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	e008      	b.n	800081a <SetPWMHandlerState+0x3a>
		case MotorDriverStateDisable: htim3.Instance->DIER &= ~TIM_DIER_UIE; break;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <SetPWMHandlerState+0x48>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	68da      	ldr	r2, [r3, #12]
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <SetPWMHandlerState+0x48>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f022 0201 	bic.w	r2, r2, #1
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	bf00      	nop
	}
	return CarouselMotorResultAccept;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20001b10 	.word	0x20001b10

0800082c <SetLockState>:
//==============================================================================
static CarouselMotorResult SetLockState(MotorDriverT* driver, MotorDriverMotorState state)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
	
	return CarouselMotorResultAccept;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <Delay>:
//==============================================================================
static CarouselMotorResult Delay(MotorDriverT* driver, uint32_t ms)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
	osDelay(ms);
 800084e:	6838      	ldr	r0, [r7, #0]
 8000850:	f003 fc36 	bl	80040c0 <osDelay>
	return CarouselMotorResultAccept;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <SetSpeed>:
//==============================================================================
static CarouselMotorResult SetSpeed(MotorDriverT* driver, float speed)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
	const uint16_t base_period;
	htim3.Instance->CCR2 = (uint16_t)((htim3.Instance->ARR + 1) * speed) - 1;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <SetSpeed+0x6c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000870:	3301      	adds	r3, #1
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fd22 	bl	80002bc <__aeabi_ui2f>
 8000878:	4603      	mov	r3, r0
 800087a:	6839      	ldr	r1, [r7, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fd75 	bl	800036c <__aeabi_fmul>
 8000882:	4603      	mov	r3, r0
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff37 	bl	80006f8 <__aeabi_f2uiz>
 800088a:	4603      	mov	r3, r0
 800088c:	b29b      	uxth	r3, r3
 800088e:	1e5a      	subs	r2, r3, #1
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <SetSpeed+0x6c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = (uint16_t)((htim3.Instance->ARR + 1) * speed) - 1;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <SetSpeed+0x6c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089c:	3301      	adds	r3, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fd0c 	bl	80002bc <__aeabi_ui2f>
 80008a4:	4603      	mov	r3, r0
 80008a6:	6839      	ldr	r1, [r7, #0]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fd5f 	bl	800036c <__aeabi_fmul>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff21 	bl	80006f8 <__aeabi_f2uiz>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <SetSpeed+0x6c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	63da      	str	r2, [r3, #60]	; 0x3c
	return CarouselMotorResultAccept;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20001b10 	.word	0x20001b10

080008d0 <GetSpeed>:
//==============================================================================
float GetSpeed(void* driver)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	return 0.0;
 80008d8:	f04f 0300 	mov.w	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <SetFrequency>:
//==============================================================================
CarouselMotorResult SetFrequency(MotorDriverT* driver, float frequency)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
	return CarouselMotorResultAccept;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <GetFrequency>:
//==============================================================================
float GetFrequency(void* driver)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	return 0.0;
 8000904:	f04f 0300 	mov.w	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <SetEncoderPosition>:
//==============================================================================
CarouselMotorResult SetEncoderPosition(MotorDriverT* driver, int position)
{
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6039      	str	r1, [r7, #0]
	
	return CarouselMotorResultAccept;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <GetEncoderPosition>:
//==============================================================================
int GetEncoderPosition(MotorDriverT* driver)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	return 0;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <CarouselMotorAdapterInit>:
	Delay
);
//==============================================================================
CarouselMotorResult CarouselMotorAdapterInit(CarouselMotorAdapterT* adapter,
														void* parent)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	if (adapter)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d023      	beq.n	8000994 <CarouselMotorAdapterInit+0x58>
	{
		if (!adapter->Description) { adapter->Description = "CarouselMotorAdapterT"; }
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <CarouselMotorAdapterInit+0x1e>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <CarouselMotorAdapterInit+0x64>)
 8000958:	601a      	str	r2, [r3, #0]
		adapter->Parent = parent;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	605a      	str	r2, [r3, #4]
		
		adapter->Driver.Options.HandlerUpdateFrequency = 1000;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
		
		adapter->Driver.Options.StartSpeed = 0.1;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <CarouselMotorAdapterInit+0x68>)
 800096c:	621a      	str	r2, [r3, #32]
		adapter->Driver.Options.StopSpeed = 0.1;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <CarouselMotorAdapterInit+0x68>)
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
		
		adapter->Driver.Options.Acceleration = 0.33;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <CarouselMotorAdapterInit+0x6c>)
 8000978:	619a      	str	r2, [r3, #24]
		adapter->Driver.Options.Deceleration = 0.33;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <CarouselMotorAdapterInit+0x6c>)
 800097e:	61da      	str	r2, [r3, #28]
		
		return MotorDriverInit(&adapter->Driver,
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0008 	add.w	r0, r3, #8
 8000986:	2300      	movs	r3, #0
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <CarouselMotorAdapterInit+0x70>)
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f003 f8c8 	bl	8003b20 <MotorDriverInit>
 8000990:	4603      	mov	r3, r0
 8000992:	e001      	b.n	8000998 <CarouselMotorAdapterInit+0x5c>
														adapter,
														&AdapterControl,
														0);
	}
	return CarouselMotorResultNullPointer;
 8000994:	f06f 0302 	mvn.w	r3, #2
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	080068d4 	.word	0x080068d4
 80009a4:	3dcccccd 	.word	0x3dcccccd
 80009a8:	3ea8f5c3 	.word	0x3ea8f5c3
 80009ac:	20000000 	.word	0x20000000

080009b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <MX_FREERTOS_Init+0x18>)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_FREERTOS_Init+0x1c>)
 80009ba:	f003 fad7 	bl	8003f6c <osThreadNew>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <MX_FREERTOS_Init+0x20>)
 80009c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	08006930 	.word	0x08006930
 80009cc:	080009d5 	.word	0x080009d5
 80009d0:	20001960 	.word	0x20001960

080009d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af02      	add	r7, sp, #8
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
		LED1_GPIO_Port->ODR ^= LED1_Pin;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <StartDefaultTask+0x78>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <StartDefaultTask+0x78>)
 80009e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80009e6:	60d3      	str	r3, [r2, #12]
		//L298_MoveTime(&L298_Device1.Driver, 0, L298_MoveDiractionForward, 1000, 3000);
		MotorDriverSetPosition(&CarouselMotor.Driver, 0, MOTOR_DRIVER_FORWARD_MAX_VALUE, 1, 3000);
 80009e8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80009f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80009f6:	2100      	movs	r1, #0
 80009f8:	4815      	ldr	r0, [pc, #84]	; (8000a50 <StartDefaultTask+0x7c>)
 80009fa:	f003 f9ac 	bl	8003d56 <MotorDriverSetPosition>
		
		while (CarouselMotor.Driver.Status.DriverState != MotorDriverDriverStateDisable)
 80009fe:	e002      	b.n	8000a06 <StartDefaultTask+0x32>
		{
			osDelay(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f003 fb5d 	bl	80040c0 <osDelay>
		while (CarouselMotor.Driver.Status.DriverState != MotorDriverDriverStateDisable)
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <StartDefaultTask+0x80>)
 8000a08:	7d1b      	ldrb	r3, [r3, #20]
 8000a0a:	f003 030c 	and.w	r3, r3, #12
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f5      	bne.n	8000a00 <StartDefaultTask+0x2c>
		}
		
		LED1_GPIO_Port->ODR ^= LED1_Pin;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <StartDefaultTask+0x78>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <StartDefaultTask+0x78>)
 8000a1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000a1e:	60d3      	str	r3, [r2, #12]
		MotorDriverSetPosition(&CarouselMotor.Driver, 0, 0, 1, 10000);
 8000a20:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4808      	ldr	r0, [pc, #32]	; (8000a50 <StartDefaultTask+0x7c>)
 8000a30:	f003 f991 	bl	8003d56 <MotorDriverSetPosition>
		
		while (CarouselMotor.Driver.Status.DriverState != MotorDriverDriverStateDisable)
 8000a34:	e002      	b.n	8000a3c <StartDefaultTask+0x68>
		{
			osDelay(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f003 fb42 	bl	80040c0 <osDelay>
		while (CarouselMotor.Driver.Status.DriverState != MotorDriverDriverStateDisable)
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <StartDefaultTask+0x80>)
 8000a3e:	7d1b      	ldrb	r3, [r3, #20]
 8000a40:	f003 030c 	and.w	r3, r3, #12
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1f5      	bne.n	8000a36 <StartDefaultTask+0x62>
		LED1_GPIO_Port->ODR ^= LED1_Pin;
 8000a4a:	e7c7      	b.n	80009dc <StartDefaultTask+0x8>
 8000a4c:	40011000 	.word	0x40011000
 8000a50:	200019c0 	.word	0x200019c0
 8000a54:	200019b8 	.word	0x200019b8

08000a58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6c:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a3d      	ldr	r2, [pc, #244]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a84:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a37      	ldr	r2, [pc, #220]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000a8a:	f043 0320 	orr.w	r3, r3, #32
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0320 	and.w	r3, r3, #32
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a31      	ldr	r2, [pc, #196]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a2b      	ldr	r2, [pc, #172]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x110>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad2:	4826      	ldr	r0, [pc, #152]	; (8000b6c <MX_GPIO_Init+0x114>)
 8000ad4:	f001 f81a 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR1_ENABLE_Pin|MOTOR2_ENABLE_Pin, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2160      	movs	r1, #96	; 0x60
 8000adc:	4824      	ldr	r0, [pc, #144]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000ade:	f001 f815 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_A0_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f241 0102 	movw	r1, #4098	; 0x1002
 8000ae8:	4822      	ldr	r0, [pc, #136]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000aea:	f001 f80f 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4619      	mov	r1, r3
 8000b06:	4819      	ldr	r0, [pc, #100]	; (8000b6c <MX_GPIO_Init+0x114>)
 8000b08:	f000 fe7c 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|MOTOR1_OVERCURRENT_Pin|MOTOR2_OVERCURRENT_Pin;
 8000b0c:	2319      	movs	r3, #25
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4814      	ldr	r0, [pc, #80]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000b20:	f000 fe70 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR1_ENABLE_Pin|MOTOR2_ENABLE_Pin;
 8000b24:	2360      	movs	r3, #96	; 0x60
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000b3c:	f000 fe62 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_A0_Pin|TFT_CS_Pin;
 8000b40:	f241 0302 	movw	r3, #4098	; 0x1002
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000b5a:	f000 fe53 	bl	8001804 <HAL_GPIO_Init>

}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40010c00 	.word	0x40010c00

08000b78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b7e:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <MX_I2C1_Init+0x54>)
 8000b80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <MX_I2C1_Init+0x58>)
 8000b86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_I2C1_Init+0x50>)
 8000bb6:	f000 ffc1 	bl	8001b3c <HAL_I2C_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc0:	f000 f8c4 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20001964 	.word	0x20001964
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	000186a0 	.word	0x000186a0

08000bd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <HAL_I2C_MspInit+0x70>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d123      	bne.n	8000c3c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_I2C_MspInit+0x74>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <HAL_I2C_MspInit+0x74>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_I2C_MspInit+0x74>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = FLASH_SCL_Pin|FLASH_SDA_Pin;
 8000c0c:	23c0      	movs	r3, #192	; 0xc0
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c10:	2312      	movs	r3, #18
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <HAL_I2C_MspInit+0x78>)
 8000c20:	f000 fdf0 	bl	8001804 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_I2C_MspInit+0x74>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_I2C_MspInit+0x74>)
 8000c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2e:	61d3      	str	r3, [r2, #28]
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_I2C_MspInit+0x74>)
 8000c32:	69db      	ldr	r3, [r3, #28]
 8000c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40005400 	.word	0x40005400
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010c00 	.word	0x40010c00

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 fcc4 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f820 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f7ff fefc 	bl	8000a58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c60:	f7ff ff8a 	bl	8000b78 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000c64:	f000 f878 	bl	8000d58 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000c68:	f000 f9ea 	bl	8001040 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c6c:	f000 fa6a 	bl	8001144 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000c70:	f000 fc14 	bl	800149c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000c74:	f000 fae8 	bl	8001248 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	CarouselMotorAdapterInit(&CarouselMotor, 0);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <main+0x44>)
 8000c7c:	f7ff fe5e 	bl	800093c <CarouselMotorAdapterInit>
	
	HAL_TIM_Base_Start_IT(&htim4);
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <main+0x48>)
 8000c82:	f001 fdbd 	bl	8002800 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c86:	f003 f90b 	bl	8003ea0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c8a:	f7ff fe91 	bl	80009b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c8e:	f003 f939 	bl	8003f04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <main+0x42>
 8000c94:	200019b8 	.word	0x200019b8
 8000c98:	20001ac8 	.word	0x20001ac8

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b090      	sub	sp, #64	; 0x40
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	2228      	movs	r2, #40	; 0x28
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f005 fdfe 	bl	80068ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cda:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 f86d 	bl	8001dc4 <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cf0:	f000 f82c 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fad8 	bl	80022c4 <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d1a:	f000 f817 	bl	8000d4c <Error_Handler>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3740      	adds	r7, #64	; 0x40
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3a:	f000 fc67 	bl	800160c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40012c00 	.word	0x40012c00

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000d5e:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <MX_SPI2_Init+0x6c>)
 8000d60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000d64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000d6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d70:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000da6:	220a      	movs	r2, #10
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_SPI2_Init+0x68>)
 8000dac:	f001 fc54 	bl	8002658 <HAL_SPI_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000db6:	f7ff ffc9 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20001a28 	.word	0x20001a28
 8000dc4:	40003800 	.word	0x40003800

08000dc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <HAL_SPI_MspInit+0x74>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d124      	bne.n	8000e32 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_SPI_MspInit+0x78>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <HAL_SPI_MspInit+0x78>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df2:	61d3      	str	r3, [r2, #28]
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_SPI_MspInit+0x78>)
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_SPI_MspInit+0x78>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_SPI_MspInit+0x78>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_SPI_MspInit+0x78>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0308 	and.w	r3, r3, #8
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|TFT_SDI_Pin;
 8000e18:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_SPI_MspInit+0x7c>)
 8000e2e:	f000 fce9 	bl	8001804 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e32:	bf00      	nop
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40003800 	.word	0x40003800
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010c00 	.word	0x40010c00

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	210f      	movs	r1, #15
 8000e82:	f06f 0001 	mvn.w	r0, #1
 8000e86:	f000 fc92 	bl	80017ae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_MspInit+0x6c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_MspInit+0x6c>)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010000 	.word	0x40010000

08000eb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	2019      	movs	r0, #25
 8000ece:	f000 fc6e 	bl	80017ae <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ed2:	2019      	movs	r0, #25
 8000ed4:	f000 fc87 	bl	80017e6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <HAL_InitTick+0x9c>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <HAL_InitTick+0x9c>)
 8000ede:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_InitTick+0x9c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef0:	f107 0210 	add.w	r2, r7, #16
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fb5e 	bl	80025bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f00:	f001 fb48 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 8000f04:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f08:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <HAL_InitTick+0xa0>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	0c9b      	lsrs	r3, r3, #18
 8000f10:	3b01      	subs	r3, #1
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <HAL_InitTick+0xa8>)
 8000f18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f36:	f001 fc13 	bl	8002760 <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d104      	bne.n	8000f4a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f40:	4806      	ldr	r0, [pc, #24]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f42:	f001 fc5d 	bl	8002800 <HAL_TIM_Base_Start_IT>
 8000f46:	4603      	mov	r3, r0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3730      	adds	r7, #48	; 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	20001a80 	.word	0x20001a80
 8000f60:	40012c00 	.word	0x40012c00

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <NMI_Handler+0x4>

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
	...

08000f90 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <TIM1_UP_IRQHandler+0x10>)
 8000f96:	f001 fde3 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20001a80 	.word	0x20001a80

08000fa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (TIM2->SR & TIM_SR_CC3IF)
 8000fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d007      	beq.n	8000fc6 <TIM2_IRQHandler+0x22>
	{
		TIM2->SR &= ~TIM_SR_CC3IF;
 8000fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc0:	f023 0308 	bic.w	r3, r3, #8
 8000fc4:	6113      	str	r3, [r2, #16]
	}
	
	if (TIM2->SR & TIM_SR_CC4IF)
 8000fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d007      	beq.n	8000fe4 <TIM2_IRQHandler+0x40>
	{
		TIM2->SR &= ~TIM_SR_CC4IF;
 8000fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fde:	f023 0310 	bic.w	r3, r3, #16
 8000fe2:	6113      	str	r3, [r2, #16]
	}
	
	return;
 8000fe4:	bf00      	nop
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if (TIM3->SR & TIM_SR_UIF)
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <TIM3_IRQHandler+0x28>)
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <TIM3_IRQHandler+0x1c>
	{
		TIM3->SR &= ~TIM_SR_UIF;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <TIM3_IRQHandler+0x28>)
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <TIM3_IRQHandler+0x28>)
 8001002:	f023 0301 	bic.w	r3, r3, #1
 8001006:	6113      	str	r3, [r2, #16]
	if (TIM3->SR & TIM_SR_CC3IF)
	{
		TIM3->SR &= ~TIM_SR_CC3IF;
	}
	*/
	MotorDriverPWMHandler(&CarouselMotor.Driver);
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <TIM3_IRQHandler+0x2c>)
 800100a:	f002 fd66 	bl	8003ada <MotorDriverPWMHandler>
	
	return;
 800100e:	bf00      	nop
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40000400 	.word	0x40000400
 8001018:	200019c0 	.word	0x200019c0

0800101c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	TIM4->SR &= ~TIM_SR_UIF;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <TIM4_IRQHandler+0x1c>)
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <TIM4_IRQHandler+0x1c>)
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	6113      	str	r3, [r2, #16]
	MotorDriverHandler(&CarouselMotor.Driver);
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <TIM4_IRQHandler+0x20>)
 800102e:	f002 fc65 	bl	80038fc <MotorDriverHandler>
	return;
 8001032:	bf00      	nop
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40000800 	.word	0x40000800
 800103c:	200019c0 	.word	0x200019c0

08001040 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	; 0x38
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <MX_TIM2_Init+0x100>)
 8001072:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8001078:	4b31      	ldr	r3, [pc, #196]	; (8001140 <MX_TIM2_Init+0x100>)
 800107a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800107e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <MX_TIM2_Init+0x100>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001086:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <MX_TIM2_Init+0x100>)
 8001088:	f242 7210 	movw	r2, #10000	; 0x2710
 800108c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <MX_TIM2_Init+0x100>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <MX_TIM2_Init+0x100>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800109a:	4829      	ldr	r0, [pc, #164]	; (8001140 <MX_TIM2_Init+0x100>)
 800109c:	f001 fb60 	bl	8002760 <HAL_TIM_Base_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010a6:	f7ff fe51 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4822      	ldr	r0, [pc, #136]	; (8001140 <MX_TIM2_Init+0x100>)
 80010b8:	f001 ff18 	bl	8002eec <HAL_TIM_ConfigClockSource>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010c2:	f7ff fe43 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010c6:	481e      	ldr	r0, [pc, #120]	; (8001140 <MX_TIM2_Init+0x100>)
 80010c8:	f001 fbec 	bl	80028a4 <HAL_TIM_PWM_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010d2:	f7ff fe3b 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010d6:	2320      	movs	r3, #32
 80010d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	4619      	mov	r1, r3
 80010e4:	4816      	ldr	r0, [pc, #88]	; (8001140 <MX_TIM2_Init+0x100>)
 80010e6:	f002 fa8d 	bl	8003604 <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010f0:	f7ff fe2c 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f4:	2360      	movs	r3, #96	; 0x60
 80010f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2208      	movs	r2, #8
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM2_Init+0x100>)
 800110c:	f001 fe30 	bl	8002d70 <HAL_TIM_PWM_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001116:	f7ff fe19 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	220c      	movs	r2, #12
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <MX_TIM2_Init+0x100>)
 8001122:	f001 fe25 	bl	8002d70 <HAL_TIM_PWM_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800112c:	f7ff fe0e 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <MX_TIM2_Init+0x100>)
 8001132:	f000 f933 	bl	800139c <HAL_TIM_MspPostInit>

}
 8001136:	bf00      	nop
 8001138:	3738      	adds	r7, #56	; 0x38
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20001b58 	.word	0x20001b58

08001144 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	; 0x38
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <MX_TIM3_Init+0xfc>)
 8001176:	4a33      	ldr	r2, [pc, #204]	; (8001244 <MX_TIM3_Init+0x100>)
 8001178:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <MX_TIM3_Init+0xfc>)
 800117c:	2247      	movs	r2, #71	; 0x47
 800117e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <MX_TIM3_Init+0xfc>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <MX_TIM3_Init+0xfc>)
 8001188:	f242 7210 	movw	r2, #10000	; 0x2710
 800118c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <MX_TIM3_Init+0xfc>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <MX_TIM3_Init+0xfc>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800119a:	4829      	ldr	r0, [pc, #164]	; (8001240 <MX_TIM3_Init+0xfc>)
 800119c:	f001 fae0 	bl	8002760 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011a6:	f7ff fdd1 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4822      	ldr	r0, [pc, #136]	; (8001240 <MX_TIM3_Init+0xfc>)
 80011b8:	f001 fe98 	bl	8002eec <HAL_TIM_ConfigClockSource>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011c2:	f7ff fdc3 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011c6:	481e      	ldr	r0, [pc, #120]	; (8001240 <MX_TIM3_Init+0xfc>)
 80011c8:	f001 fb6c 	bl	80028a4 <HAL_TIM_PWM_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011d2:	f7ff fdbb 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011d6:	2320      	movs	r3, #32
 80011d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	4619      	mov	r1, r3
 80011e4:	4816      	ldr	r0, [pc, #88]	; (8001240 <MX_TIM3_Init+0xfc>)
 80011e6:	f002 fa0d 	bl	8003604 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011f0:	f7ff fdac 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f4:	2360      	movs	r3, #96	; 0x60
 80011f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2204      	movs	r2, #4
 8001208:	4619      	mov	r1, r3
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_TIM3_Init+0xfc>)
 800120c:	f001 fdb0 	bl	8002d70 <HAL_TIM_PWM_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001216:	f7ff fd99 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2208      	movs	r2, #8
 800121e:	4619      	mov	r1, r3
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <MX_TIM3_Init+0xfc>)
 8001222:	f001 fda5 	bl	8002d70 <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800122c:	f7ff fd8e 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <MX_TIM3_Init+0xfc>)
 8001232:	f000 f8b3 	bl	800139c <HAL_TIM_MspPostInit>

}
 8001236:	bf00      	nop
 8001238:	3738      	adds	r7, #56	; 0x38
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20001b10 	.word	0x20001b10
 8001244:	40000400 	.word	0x40000400

08001248 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_TIM4_Init+0x94>)
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <MX_TIM4_Init+0x98>)
 8001268:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_TIM4_Init+0x94>)
 800126c:	2247      	movs	r2, #71	; 0x47
 800126e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_TIM4_Init+0x94>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_TIM4_Init+0x94>)
 8001278:	f240 32e7 	movw	r2, #999	; 0x3e7
 800127c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_TIM4_Init+0x94>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_TIM4_Init+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <MX_TIM4_Init+0x94>)
 800128c:	f001 fa68 	bl	8002760 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001296:	f7ff fd59 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_TIM4_Init+0x94>)
 80012a8:	f001 fe20 	bl	8002eec <HAL_TIM_ConfigClockSource>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80012b2:	f7ff fd4b 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012b6:	2320      	movs	r3, #32
 80012b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_TIM4_Init+0x94>)
 80012c4:	f002 f99e 	bl	8003604 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80012ce:	f7ff fd3d 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20001ac8 	.word	0x20001ac8
 80012e0:	40000800 	.word	0x40000800

080012e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f4:	d114      	bne.n	8001320 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <HAL_TIM_Base_MspInit+0xac>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a25      	ldr	r2, [pc, #148]	; (8001390 <HAL_TIM_Base_MspInit+0xac>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <HAL_TIM_Base_MspInit+0xac>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2105      	movs	r1, #5
 8001312:	201c      	movs	r0, #28
 8001314:	f000 fa4b 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001318:	201c      	movs	r0, #28
 800131a:	f000 fa64 	bl	80017e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800131e:	e032      	b.n	8001386 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_TIM_Base_MspInit+0xb0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d114      	bne.n	8001354 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_TIM_Base_MspInit+0xac>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <HAL_TIM_Base_MspInit+0xac>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <HAL_TIM_Base_MspInit+0xac>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2105      	movs	r1, #5
 8001346:	201d      	movs	r0, #29
 8001348:	f000 fa31 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800134c:	201d      	movs	r0, #29
 800134e:	f000 fa4a 	bl	80017e6 <HAL_NVIC_EnableIRQ>
}
 8001352:	e018      	b.n	8001386 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_TIM_Base_MspInit+0xb4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d113      	bne.n	8001386 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_TIM_Base_MspInit+0xac>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <HAL_TIM_Base_MspInit+0xac>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_TIM_Base_MspInit+0xac>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2105      	movs	r1, #5
 800137a:	201e      	movs	r0, #30
 800137c:	f000 fa17 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001380:	201e      	movs	r0, #30
 8001382:	f000 fa30 	bl	80017e6 <HAL_NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	40000400 	.word	0x40000400
 8001398:	40000800 	.word	0x40000800

0800139c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ba:	d12b      	bne.n	8001414 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013bc:	4b32      	ldr	r3, [pc, #200]	; (8001488 <HAL_TIM_MspPostInit+0xec>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a31      	ldr	r2, [pc, #196]	; (8001488 <HAL_TIM_MspPostInit+0xec>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <HAL_TIM_MspPostInit+0xec>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR2_PWM1_Pin|MOTOR2_PWM2_Pin;
 80013d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2302      	movs	r3, #2
 80013e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4828      	ldr	r0, [pc, #160]	; (800148c <HAL_TIM_MspPostInit+0xf0>)
 80013ea:	f000 fa0b 	bl	8001804 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_TIM_MspPostInit+0xf4>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	4a20      	ldr	r2, [pc, #128]	; (8001490 <HAL_TIM_MspPostInit+0xf4>)
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001412:	e034      	b.n	800147e <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <HAL_TIM_MspPostInit+0xf8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d12f      	bne.n	800147e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_TIM_MspPostInit+0xec>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_TIM_MspPostInit+0xec>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6193      	str	r3, [r2, #24]
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_TIM_MspPostInit+0xec>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_TIM_MspPostInit+0xec>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <HAL_TIM_MspPostInit+0xec>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	6193      	str	r3, [r2, #24]
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_TIM_MspPostInit+0xec>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR1_PWM1_Pin;
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2302      	movs	r3, #2
 8001458:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MOTOR1_PWM1_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <HAL_TIM_MspPostInit+0xfc>)
 8001462:	f000 f9cf 	bl	8001804 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR1_PWM2_Pin;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2302      	movs	r3, #2
 8001470:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MOTOR1_PWM2_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <HAL_TIM_MspPostInit+0xf0>)
 800147a:	f000 f9c3 	bl	8001804 <HAL_GPIO_Init>
}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	40010c00 	.word	0x40010c00
 8001490:	40010000 	.word	0x40010000
 8001494:	40000400 	.word	0x40000400
 8001498:	40010800 	.word	0x40010800

0800149c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_USART1_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 512000;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a8:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80014ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014d4:	f002 f906 	bl	80036e4 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f7ff fc35 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20001ba0 	.word	0x20001ba0
 80014ec:	40013800 	.word	0x40013800

080014f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <HAL_UART_MspInit+0x8c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d131      	bne.n	8001574 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_UART_MspInit+0x90>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <HAL_UART_MspInit+0x90>)
 8001516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_UART_MspInit+0x90>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_UART_MspInit+0x90>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_UART_MspInit+0x90>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_UART_MspInit+0x90>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001544:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4619      	mov	r1, r3
 8001554:	480b      	ldr	r0, [pc, #44]	; (8001584 <HAL_UART_MspInit+0x94>)
 8001556:	f000 f955 	bl	8001804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800155a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <HAL_UART_MspInit+0x94>)
 8001570:	f000 f948 	bl	8001804 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40013800 	.word	0x40013800
 8001580:	40021000 	.word	0x40021000
 8001584:	40010800 	.word	0x40010800

08001588 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	; (80015c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	; (80015cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ae:	f000 f810 	bl	80015d2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b2:	f005 f949 	bl	8006848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015b6:	f7ff fb4b 	bl	8000c50 <main>
  bx lr
 80015ba:	4770      	bx	lr
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80015c4:	08006974 	.word	0x08006974
  ldr r2, =_sbss
 80015c8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80015cc:	20001c28 	.word	0x20001c28

080015d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC1_2_IRQHandler>

080015d2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_Init+0x28>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_Init+0x28>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f000 f8d1 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f6:	200f      	movs	r0, #15
 80015f8:	f7ff fc5e 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fc:	f7ff fc24 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000

0800160c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_IncTick+0x1c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_IncTick+0x20>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a03      	ldr	r2, [pc, #12]	; (800162c <HAL_IncTick+0x20>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000034 	.word	0x20000034
 800162c:	20001be4 	.word	0x20001be4

08001630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b02      	ldr	r3, [pc, #8]	; (8001640 <HAL_GetTick+0x10>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	20001be4 	.word	0x20001be4

08001644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800166c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db0b      	blt.n	80016d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	4906      	ldr	r1, [pc, #24]	; (80016dc <__NVIC_EnableIRQ+0x34>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff4f 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff64 	bl	800168c <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ffb2 	bl	8001734 <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff81 	bl	80016e0 <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff57 	bl	80016a8 <__NVIC_EnableIRQ>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	; 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001816:	e169      	b.n	8001aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001818:	2201      	movs	r2, #1
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8158 	bne.w	8001ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4a9a      	ldr	r2, [pc, #616]	; (8001aa4 <HAL_GPIO_Init+0x2a0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d05e      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001840:	4a98      	ldr	r2, [pc, #608]	; (8001aa4 <HAL_GPIO_Init+0x2a0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d875      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001846:	4a98      	ldr	r2, [pc, #608]	; (8001aa8 <HAL_GPIO_Init+0x2a4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d058      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 800184c:	4a96      	ldr	r2, [pc, #600]	; (8001aa8 <HAL_GPIO_Init+0x2a4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d86f      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001852:	4a96      	ldr	r2, [pc, #600]	; (8001aac <HAL_GPIO_Init+0x2a8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d052      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001858:	4a94      	ldr	r2, [pc, #592]	; (8001aac <HAL_GPIO_Init+0x2a8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d869      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800185e:	4a94      	ldr	r2, [pc, #592]	; (8001ab0 <HAL_GPIO_Init+0x2ac>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d04c      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001864:	4a92      	ldr	r2, [pc, #584]	; (8001ab0 <HAL_GPIO_Init+0x2ac>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d863      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800186a:	4a92      	ldr	r2, [pc, #584]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d046      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001870:	4a90      	ldr	r2, [pc, #576]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d85d      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001876:	2b12      	cmp	r3, #18
 8001878:	d82a      	bhi.n	80018d0 <HAL_GPIO_Init+0xcc>
 800187a:	2b12      	cmp	r3, #18
 800187c:	d859      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <HAL_GPIO_Init+0x80>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	080018ff 	.word	0x080018ff
 8001888:	080018d9 	.word	0x080018d9
 800188c:	080018eb 	.word	0x080018eb
 8001890:	0800192d 	.word	0x0800192d
 8001894:	08001933 	.word	0x08001933
 8001898:	08001933 	.word	0x08001933
 800189c:	08001933 	.word	0x08001933
 80018a0:	08001933 	.word	0x08001933
 80018a4:	08001933 	.word	0x08001933
 80018a8:	08001933 	.word	0x08001933
 80018ac:	08001933 	.word	0x08001933
 80018b0:	08001933 	.word	0x08001933
 80018b4:	08001933 	.word	0x08001933
 80018b8:	08001933 	.word	0x08001933
 80018bc:	08001933 	.word	0x08001933
 80018c0:	08001933 	.word	0x08001933
 80018c4:	08001933 	.word	0x08001933
 80018c8:	080018e1 	.word	0x080018e1
 80018cc:	080018f5 	.word	0x080018f5
 80018d0:	4a79      	ldr	r2, [pc, #484]	; (8001ab8 <HAL_GPIO_Init+0x2b4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d6:	e02c      	b.n	8001932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e029      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	3304      	adds	r3, #4
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e024      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	3308      	adds	r3, #8
 80018f0:	623b      	str	r3, [r7, #32]
          break;
 80018f2:	e01f      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	330c      	adds	r3, #12
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e01a      	b.n	8001934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001906:	2304      	movs	r3, #4
 8001908:	623b      	str	r3, [r7, #32]
          break;
 800190a:	e013      	b.n	8001934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001914:	2308      	movs	r3, #8
 8001916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	611a      	str	r2, [r3, #16]
          break;
 800191e:	e009      	b.n	8001934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001920:	2308      	movs	r3, #8
 8001922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	615a      	str	r2, [r3, #20]
          break;
 800192a:	e003      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x130>
          break;
 8001932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d801      	bhi.n	800193e <HAL_GPIO_Init+0x13a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	e001      	b.n	8001942 <HAL_GPIO_Init+0x13e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3304      	adds	r3, #4
 8001942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d802      	bhi.n	8001950 <HAL_GPIO_Init+0x14c>
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	e002      	b.n	8001956 <HAL_GPIO_Init+0x152>
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	3b08      	subs	r3, #8
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	210f      	movs	r1, #15
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	6a39      	ldr	r1, [r7, #32]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	431a      	orrs	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80b1 	beq.w	8001ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001984:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800199c:	4a48      	ldr	r2, [pc, #288]	; (8001ac0 <HAL_GPIO_Init+0x2bc>)
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a40      	ldr	r2, [pc, #256]	; (8001ac4 <HAL_GPIO_Init+0x2c0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d013      	beq.n	80019f0 <HAL_GPIO_Init+0x1ec>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <HAL_GPIO_Init+0x2c4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00d      	beq.n	80019ec <HAL_GPIO_Init+0x1e8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3e      	ldr	r2, [pc, #248]	; (8001acc <HAL_GPIO_Init+0x2c8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d007      	beq.n	80019e8 <HAL_GPIO_Init+0x1e4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3d      	ldr	r2, [pc, #244]	; (8001ad0 <HAL_GPIO_Init+0x2cc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_GPIO_Init+0x1e0>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e006      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019e4:	2304      	movs	r3, #4
 80019e6:	e004      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e002      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019f0:	2300      	movs	r3, #0
 80019f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f4:	f002 0203 	and.w	r2, r2, #3
 80019f8:	0092      	lsls	r2, r2, #2
 80019fa:	4093      	lsls	r3, r2
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a02:	492f      	ldr	r1, [pc, #188]	; (8001ac0 <HAL_GPIO_Init+0x2bc>)
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	492c      	ldr	r1, [pc, #176]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4928      	ldr	r1, [pc, #160]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4922      	ldr	r1, [pc, #136]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	491e      	ldr	r1, [pc, #120]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	4918      	ldr	r1, [pc, #96]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4914      	ldr	r1, [pc, #80]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d021      	beq.n	8001ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
 8001aa0:	e021      	b.n	8001ae6 <HAL_GPIO_Init+0x2e2>
 8001aa2:	bf00      	nop
 8001aa4:	10320000 	.word	0x10320000
 8001aa8:	10310000 	.word	0x10310000
 8001aac:	10220000 	.word	0x10220000
 8001ab0:	10210000 	.word	0x10210000
 8001ab4:	10120000 	.word	0x10120000
 8001ab8:	10110000 	.word	0x10110000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	40010800 	.word	0x40010800
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	40011000 	.word	0x40011000
 8001ad0:	40011400 	.word	0x40011400
 8001ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	4909      	ldr	r1, [pc, #36]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f47f ae8e 	bne.w	8001818 <HAL_GPIO_Init+0x14>
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	372c      	adds	r7, #44	; 0x2c
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b28:	e003      	b.n	8001b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e12b      	b.n	8001da6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff f836 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2224      	movs	r2, #36	; 0x24
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ba0:	f000 fce4 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 8001ba4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4a81      	ldr	r2, [pc, #516]	; (8001db0 <HAL_I2C_Init+0x274>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d807      	bhi.n	8001bc0 <HAL_I2C_Init+0x84>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4a80      	ldr	r2, [pc, #512]	; (8001db4 <HAL_I2C_Init+0x278>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	bf94      	ite	ls
 8001bb8:	2301      	movls	r3, #1
 8001bba:	2300      	movhi	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	e006      	b.n	8001bce <HAL_I2C_Init+0x92>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a7d      	ldr	r2, [pc, #500]	; (8001db8 <HAL_I2C_Init+0x27c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	bf94      	ite	ls
 8001bc8:	2301      	movls	r3, #1
 8001bca:	2300      	movhi	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0e7      	b.n	8001da6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4a78      	ldr	r2, [pc, #480]	; (8001dbc <HAL_I2C_Init+0x280>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0c9b      	lsrs	r3, r3, #18
 8001be0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a6a      	ldr	r2, [pc, #424]	; (8001db0 <HAL_I2C_Init+0x274>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d802      	bhi.n	8001c10 <HAL_I2C_Init+0xd4>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	e009      	b.n	8001c24 <HAL_I2C_Init+0xe8>
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	4a69      	ldr	r2, [pc, #420]	; (8001dc0 <HAL_I2C_Init+0x284>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	3301      	adds	r3, #1
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	495c      	ldr	r1, [pc, #368]	; (8001db0 <HAL_I2C_Init+0x274>)
 8001c40:	428b      	cmp	r3, r1
 8001c42:	d819      	bhi.n	8001c78 <HAL_I2C_Init+0x13c>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1e59      	subs	r1, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c52:	1c59      	adds	r1, r3, #1
 8001c54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c58:	400b      	ands	r3, r1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <HAL_I2C_Init+0x138>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1e59      	subs	r1, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c72:	e051      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001c74:	2304      	movs	r3, #4
 8001c76:	e04f      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d111      	bne.n	8001ca4 <HAL_I2C_Init+0x168>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1e58      	subs	r0, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	440b      	add	r3, r1
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	e012      	b.n	8001cca <HAL_I2C_Init+0x18e>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1e58      	subs	r0, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	0099      	lsls	r1, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2301      	moveq	r3, #1
 8001cc6:	2300      	movne	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Init+0x196>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e022      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_I2C_Init+0x1bc>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1e58      	subs	r0, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6859      	ldr	r1, [r3, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	440b      	add	r3, r1
 8001ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf6:	e00f      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e58      	subs	r0, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	0099      	lsls	r1, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	6809      	ldr	r1, [r1, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69da      	ldr	r2, [r3, #28]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6911      	ldr	r1, [r2, #16]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68d2      	ldr	r2, [r2, #12]
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	000186a0 	.word	0x000186a0
 8001db4:	001e847f 	.word	0x001e847f
 8001db8:	003d08ff 	.word	0x003d08ff
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	10624dd3 	.word	0x10624dd3

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e26c      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8087 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de4:	4b92      	ldr	r3, [pc, #584]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d00c      	beq.n	8001e0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df0:	4b8f      	ldr	r3, [pc, #572]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d112      	bne.n	8001e22 <HAL_RCC_OscConfig+0x5e>
 8001dfc:	4b8c      	ldr	r3, [pc, #560]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e08:	d10b      	bne.n	8001e22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0a:	4b89      	ldr	r3, [pc, #548]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d06c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x12c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d168      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e246      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x76>
 8001e2c:	4b80      	ldr	r3, [pc, #512]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a7f      	ldr	r2, [pc, #508]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e02e      	b.n	8001e98 <HAL_RCC_OscConfig+0xd4>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x98>
 8001e42:	4b7b      	ldr	r3, [pc, #492]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a7a      	ldr	r2, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b78      	ldr	r3, [pc, #480]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a77      	ldr	r2, [pc, #476]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e01d      	b.n	8001e98 <HAL_RCC_OscConfig+0xd4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0xbc>
 8001e66:	4b72      	ldr	r3, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a71      	ldr	r2, [pc, #452]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e00b      	b.n	8001e98 <HAL_RCC_OscConfig+0xd4>
 8001e80:	4b6b      	ldr	r3, [pc, #428]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a6a      	ldr	r2, [pc, #424]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b68      	ldr	r3, [pc, #416]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a67      	ldr	r2, [pc, #412]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fbc6 	bl	8001630 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fbc2 	bl	8001630 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	; 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1fa      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xe4>
 8001ec6:	e014      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fbb2 	bl	8001630 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fbae 	bl	8001630 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1e6      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x10c>
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d063      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efe:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f0a:	4b49      	ldr	r3, [pc, #292]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d11c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x18c>
 8001f16:	4b46      	ldr	r3, [pc, #280]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d116      	bne.n	8001f50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	4b43      	ldr	r3, [pc, #268]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_RCC_OscConfig+0x176>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e1ba      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4939      	ldr	r1, [pc, #228]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	e03a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d020      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7ff fb67 	bl	8001630 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f66:	f7ff fb63 	bl	8001630 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e19b      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4927      	ldr	r1, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fb46 	bl	8001630 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa8:	f7ff fb42 	bl	8001630 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e17a      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d03a      	beq.n	8002048 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d019      	beq.n	800200e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_RCC_OscConfig+0x274>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7ff fb26 	bl	8001630 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe8:	f7ff fb22 	bl	8001630 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e15a      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002006:	2001      	movs	r0, #1
 8002008:	f000 fb08 	bl	800261c <RCC_Delay>
 800200c:	e01c      	b.n	8002048 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_RCC_OscConfig+0x274>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7ff fb0c 	bl	8001630 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201a:	e00f      	b.n	800203c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff fb08 	bl	8001630 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d908      	bls.n	800203c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e140      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	42420000 	.word	0x42420000
 8002038:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	4b9e      	ldr	r3, [pc, #632]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1e9      	bne.n	800201c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80a6 	beq.w	80021a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b97      	ldr	r3, [pc, #604]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10d      	bne.n	8002082 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	4b94      	ldr	r3, [pc, #592]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a93      	ldr	r2, [pc, #588]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	61d3      	str	r3, [r2, #28]
 8002072:	4b91      	ldr	r3, [pc, #580]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	4b8e      	ldr	r3, [pc, #568]	; (80022bc <HAL_RCC_OscConfig+0x4f8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d118      	bne.n	80020c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208e:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <HAL_RCC_OscConfig+0x4f8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a8a      	ldr	r2, [pc, #552]	; (80022bc <HAL_RCC_OscConfig+0x4f8>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209a:	f7ff fac9 	bl	8001630 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a2:	f7ff fac5 	bl	8001630 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b64      	cmp	r3, #100	; 0x64
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0fd      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCC_OscConfig+0x4f8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x312>
 80020c8:	4b7b      	ldr	r3, [pc, #492]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a7a      	ldr	r2, [pc, #488]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6213      	str	r3, [r2, #32]
 80020d4:	e02d      	b.n	8002132 <HAL_RCC_OscConfig+0x36e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x334>
 80020de:	4b76      	ldr	r3, [pc, #472]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a75      	ldr	r2, [pc, #468]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	4b73      	ldr	r3, [pc, #460]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a72      	ldr	r2, [pc, #456]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6213      	str	r3, [r2, #32]
 80020f6:	e01c      	b.n	8002132 <HAL_RCC_OscConfig+0x36e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d10c      	bne.n	800211a <HAL_RCC_OscConfig+0x356>
 8002100:	4b6d      	ldr	r3, [pc, #436]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a6c      	ldr	r2, [pc, #432]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	f043 0304 	orr.w	r3, r3, #4
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a69      	ldr	r2, [pc, #420]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	e00b      	b.n	8002132 <HAL_RCC_OscConfig+0x36e>
 800211a:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	4b64      	ldr	r3, [pc, #400]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a63      	ldr	r2, [pc, #396]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d015      	beq.n	8002166 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7ff fa79 	bl	8001630 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	e00a      	b.n	8002158 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7ff fa75 	bl	8001630 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e0ab      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	4b57      	ldr	r3, [pc, #348]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ee      	beq.n	8002142 <HAL_RCC_OscConfig+0x37e>
 8002164:	e014      	b.n	8002190 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002166:	f7ff fa63 	bl	8001630 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7ff fa5f 	bl	8001630 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	; 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e095      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002184:	4b4c      	ldr	r3, [pc, #304]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1ee      	bne.n	800216e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d105      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002196:	4b48      	ldr	r3, [pc, #288]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8081 	beq.w	80022ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ac:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d061      	beq.n	800227c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d146      	bne.n	800224e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c0:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_RCC_OscConfig+0x4fc>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7ff fa33 	bl	8001630 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7ff fa2f 	bl	8001630 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e067      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e0:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f4:	d108      	bne.n	8002208 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	492d      	ldr	r1, [pc, #180]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a19      	ldr	r1, [r3, #32]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	430b      	orrs	r3, r1
 800221a:	4927      	ldr	r1, [pc, #156]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002220:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <HAL_RCC_OscConfig+0x4fc>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7ff fa03 	bl	8001630 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7ff f9ff 	bl	8001630 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e037      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x46a>
 800224c:	e02f      	b.n	80022ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_RCC_OscConfig+0x4fc>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff f9ec 	bl	8001630 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225c:	f7ff f9e8 	bl	8001630 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e020      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x498>
 800227a:	e018      	b.n	80022ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e013      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	429a      	cmp	r2, r3
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
 80022c0:	42420060 	.word	0x42420060

080022c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0d0      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d8:	4b6a      	ldr	r3, [pc, #424]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d910      	bls.n	8002308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b67      	ldr	r3, [pc, #412]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0207 	bic.w	r2, r3, #7
 80022ee:	4965      	ldr	r1, [pc, #404]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b63      	ldr	r3, [pc, #396]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0b8      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d020      	beq.n	8002356 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002320:	4b59      	ldr	r3, [pc, #356]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a58      	ldr	r2, [pc, #352]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800232a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002338:	4b53      	ldr	r3, [pc, #332]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a52      	ldr	r2, [pc, #328]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002342:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002344:	4b50      	ldr	r3, [pc, #320]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	494d      	ldr	r1, [pc, #308]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d040      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d115      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e07f      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002382:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e073      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e06b      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f023 0203 	bic.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4936      	ldr	r1, [pc, #216]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b4:	f7ff f93c 	bl	8001630 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7ff f938 	bl	8001630 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e053      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 020c 	and.w	r2, r3, #12
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d1eb      	bne.n	80023bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d210      	bcs.n	8002414 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4922      	ldr	r1, [pc, #136]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e032      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4916      	ldr	r1, [pc, #88]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	490e      	ldr	r1, [pc, #56]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002452:	f000 f821 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8002456:	4602      	mov	r2, r0
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	490a      	ldr	r1, [pc, #40]	; (800248c <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	5ccb      	ldrb	r3, [r1, r3]
 8002466:	fa22 f303 	lsr.w	r3, r2, r3
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1cc>)
 800246c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_ClockConfig+0x1d0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fd20 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40022000 	.word	0x40022000
 8002488:	40021000 	.word	0x40021000
 800248c:	08006954 	.word	0x08006954
 8002490:	2000002c 	.word	0x2000002c
 8002494:	20000030 	.word	0x20000030

08002498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002498:	b490      	push	{r4, r7}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800249e:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024a0:	1d3c      	adds	r4, r7, #4
 80024a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024a8:	f240 2301 	movw	r3, #513	; 0x201
 80024ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024c2:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_RCC_GetSysClockFreq+0xb4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x40>
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d003      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x46>
 80024d6:	e02d      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024da:	623b      	str	r3, [r7, #32]
      break;
 80024dc:	e02d      	b.n	800253a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024ea:	4413      	add	r3, r2
 80024ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_GetSysClockFreq+0xb4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	0c5b      	lsrs	r3, r3, #17
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800250a:	4413      	add	r3, r2
 800250c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002510:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002516:	fb02 f203 	mul.w	r2, r2, r3
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
 8002522:	e004      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	4a0b      	ldr	r2, [pc, #44]	; (8002554 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	623b      	str	r3, [r7, #32]
      break;
 8002532:	e002      	b.n	800253a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002536:	623b      	str	r3, [r7, #32]
      break;
 8002538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253a:	6a3b      	ldr	r3, [r7, #32]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3728      	adds	r7, #40	; 0x28
 8002540:	46bd      	mov	sp, r7
 8002542:	bc90      	pop	{r4, r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	080068f8 	.word	0x080068f8
 800254c:	40021000 	.word	0x40021000
 8002550:	007a1200 	.word	0x007a1200
 8002554:	003d0900 	.word	0x003d0900

08002558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800255c:	4b02      	ldr	r3, [pc, #8]	; (8002568 <HAL_RCC_GetHCLKFreq+0x10>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	2000002c 	.word	0x2000002c

0800256c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002570:	f7ff fff2 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4903      	ldr	r1, [pc, #12]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	08006964 	.word	0x08006964

08002594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002598:	f7ff ffde 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	0adb      	lsrs	r3, r3, #11
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	08006964 	.word	0x08006964

080025bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	220f      	movs	r2, #15
 80025ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_RCC_GetClockConfig+0x58>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0203 	and.w	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_RCC_GetClockConfig+0x58>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_GetClockConfig+0x58>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_RCC_GetClockConfig+0x58>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	08db      	lsrs	r3, r3, #3
 80025f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_GetClockConfig+0x5c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0207 	and.w	r2, r3, #7
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	40021000 	.word	0x40021000
 8002618:	40022000 	.word	0x40022000

0800261c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <RCC_Delay+0x34>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <RCC_Delay+0x38>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0a5b      	lsrs	r3, r3, #9
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002638:	bf00      	nop
  }
  while (Delay --);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1e5a      	subs	r2, r3, #1
 800263e:	60fa      	str	r2, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f9      	bne.n	8002638 <RCC_Delay+0x1c>
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	2000002c 	.word	0x2000002c
 8002654:	10624dd3 	.word	0x10624dd3

08002658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e076      	b.n	8002758 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	2b00      	cmp	r3, #0
 8002670:	d108      	bne.n	8002684 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800267a:	d009      	beq.n	8002690 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
 8002682:	e005      	b.n	8002690 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7fe fb8c 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	ea42 0103 	orr.w	r1, r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	0c1a      	lsrs	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f002 0204 	and.w	r2, r2, #4
 8002736:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002746:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e041      	b.n	80027f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fdac 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f000 fc8c 	bl	80030bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d001      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e03a      	b.n	800288e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a18      	ldr	r2, [pc, #96]	; (8002898 <HAL_TIM_Base_Start_IT+0x98>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00e      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x58>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002842:	d009      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x58>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <HAL_TIM_Base_Start_IT+0x9c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x58>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d111      	bne.n	800287c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b06      	cmp	r3, #6
 8002868:	d010      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287a:	e007      	b.n	800288c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	40012c00 	.word	0x40012c00
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800

080028a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e041      	b.n	800293a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f839 	bl	8002942 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f000 fbea 	bl	80030bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_TIM_PWM_Start+0x24>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e022      	b.n	80029be <HAL_TIM_PWM_Start+0x6a>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b04      	cmp	r3, #4
 800297c:	d109      	bne.n	8002992 <HAL_TIM_PWM_Start+0x3e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	e015      	b.n	80029be <HAL_TIM_PWM_Start+0x6a>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d109      	bne.n	80029ac <HAL_TIM_PWM_Start+0x58>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e008      	b.n	80029be <HAL_TIM_PWM_Start+0x6a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	bf14      	ite	ne
 80029b8:	2301      	movne	r3, #1
 80029ba:	2300      	moveq	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e05e      	b.n	8002a84 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <HAL_TIM_PWM_Start+0x82>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d4:	e013      	b.n	80029fe <HAL_TIM_PWM_Start+0xaa>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d104      	bne.n	80029e6 <HAL_TIM_PWM_Start+0x92>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e4:	e00b      	b.n	80029fe <HAL_TIM_PWM_Start+0xaa>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d104      	bne.n	80029f6 <HAL_TIM_PWM_Start+0xa2>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f4:	e003      	b.n	80029fe <HAL_TIM_PWM_Start+0xaa>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2201      	movs	r2, #1
 8002a04:	6839      	ldr	r1, [r7, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fdd8 	bl	80035bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <HAL_TIM_PWM_Start+0x138>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d107      	bne.n	8002a26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_TIM_PWM_Start+0x138>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <HAL_TIM_PWM_Start+0xfa>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d009      	beq.n	8002a4e <HAL_TIM_PWM_Start+0xfa>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <HAL_TIM_PWM_Start+0x13c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_TIM_PWM_Start+0xfa>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a12      	ldr	r2, [pc, #72]	; (8002a94 <HAL_TIM_PWM_Start+0x140>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d111      	bne.n	8002a72 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	d010      	beq.n	8002a82 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a70:	e007      	b.n	8002a82 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800

08002a98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fd86 	bl	80035bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a29      	ldr	r2, [pc, #164]	; (8002b5c <HAL_TIM_PWM_Stop+0xc4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d117      	bne.n	8002aea <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a1a      	ldr	r2, [r3, #32]
 8002ac0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <HAL_TIM_PWM_Stop+0x52>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6a1a      	ldr	r2, [r3, #32]
 8002ad0:	f240 4344 	movw	r3, #1092	; 0x444
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <HAL_TIM_PWM_Stop+0x52>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1a      	ldr	r2, [r3, #32]
 8002af0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10f      	bne.n	8002b1a <HAL_TIM_PWM_Stop+0x82>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	f240 4344 	movw	r3, #1092	; 0x444
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d107      	bne.n	8002b1a <HAL_TIM_PWM_Stop+0x82>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0201 	bic.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_PWM_Stop+0x92>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b28:	e013      	b.n	8002b52 <HAL_TIM_PWM_Stop+0xba>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_PWM_Stop+0xa2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b38:	e00b      	b.n	8002b52 <HAL_TIM_PWM_Stop+0xba>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_PWM_Stop+0xb2>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b48:	e003      	b.n	8002b52 <HAL_TIM_PWM_Stop+0xba>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40012c00 	.word	0x40012c00

08002b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0202 	mvn.w	r2, #2
 8002b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa6f 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa62 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fa71 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0204 	mvn.w	r2, #4
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa45 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fa38 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fa47 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0208 	mvn.w	r2, #8
 8002c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fa1b 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa0e 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fa1d 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d122      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0210 	mvn.w	r2, #16
 8002c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f9f1 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f9e4 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f9f3 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0201 	mvn.w	r2, #1
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe f822 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b80      	cmp	r3, #128	; 0x80
 8002cfe:	d107      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fce1 	bl	80036d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f9b7 	bl	80030aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0220 	mvn.w	r2, #32
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fcac 	bl	80036c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e0ac      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	f200 809f 	bhi.w	8002ed8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002dd5 	.word	0x08002dd5
 8002da4:	08002ed9 	.word	0x08002ed9
 8002da8:	08002ed9 	.word	0x08002ed9
 8002dac:	08002ed9 	.word	0x08002ed9
 8002db0:	08002e15 	.word	0x08002e15
 8002db4:	08002ed9 	.word	0x08002ed9
 8002db8:	08002ed9 	.word	0x08002ed9
 8002dbc:	08002ed9 	.word	0x08002ed9
 8002dc0:	08002e57 	.word	0x08002e57
 8002dc4:	08002ed9 	.word	0x08002ed9
 8002dc8:	08002ed9 	.word	0x08002ed9
 8002dcc:	08002ed9 	.word	0x08002ed9
 8002dd0:	08002e97 	.word	0x08002e97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f9d0 	bl	8003180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0208 	orr.w	r2, r2, #8
 8002dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0204 	bic.w	r2, r2, #4
 8002dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6999      	ldr	r1, [r3, #24]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	619a      	str	r2, [r3, #24]
      break;
 8002e12:	e062      	b.n	8002eda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fa16 	bl	800324c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6999      	ldr	r1, [r3, #24]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	021a      	lsls	r2, r3, #8
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	619a      	str	r2, [r3, #24]
      break;
 8002e54:	e041      	b.n	8002eda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fa5f 	bl	8003320 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0208 	orr.w	r2, r2, #8
 8002e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0204 	bic.w	r2, r2, #4
 8002e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69d9      	ldr	r1, [r3, #28]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	61da      	str	r2, [r3, #28]
      break;
 8002e94:	e021      	b.n	8002eda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 faa9 	bl	80033f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69da      	ldr	r2, [r3, #28]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69d9      	ldr	r1, [r3, #28]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	021a      	lsls	r2, r3, #8
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	61da      	str	r2, [r3, #28]
      break;
 8002ed6:	e000      	b.n	8002eda <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ed8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_TIM_ConfigClockSource+0x18>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e0b3      	b.n	800306c <HAL_TIM_ConfigClockSource+0x180>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3c:	d03e      	beq.n	8002fbc <HAL_TIM_ConfigClockSource+0xd0>
 8002f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f42:	f200 8087 	bhi.w	8003054 <HAL_TIM_ConfigClockSource+0x168>
 8002f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4a:	f000 8085 	beq.w	8003058 <HAL_TIM_ConfigClockSource+0x16c>
 8002f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f52:	d87f      	bhi.n	8003054 <HAL_TIM_ConfigClockSource+0x168>
 8002f54:	2b70      	cmp	r3, #112	; 0x70
 8002f56:	d01a      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0xa2>
 8002f58:	2b70      	cmp	r3, #112	; 0x70
 8002f5a:	d87b      	bhi.n	8003054 <HAL_TIM_ConfigClockSource+0x168>
 8002f5c:	2b60      	cmp	r3, #96	; 0x60
 8002f5e:	d050      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x116>
 8002f60:	2b60      	cmp	r3, #96	; 0x60
 8002f62:	d877      	bhi.n	8003054 <HAL_TIM_ConfigClockSource+0x168>
 8002f64:	2b50      	cmp	r3, #80	; 0x50
 8002f66:	d03c      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0xf6>
 8002f68:	2b50      	cmp	r3, #80	; 0x50
 8002f6a:	d873      	bhi.n	8003054 <HAL_TIM_ConfigClockSource+0x168>
 8002f6c:	2b40      	cmp	r3, #64	; 0x40
 8002f6e:	d058      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x136>
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d86f      	bhi.n	8003054 <HAL_TIM_ConfigClockSource+0x168>
 8002f74:	2b30      	cmp	r3, #48	; 0x30
 8002f76:	d064      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x156>
 8002f78:	2b30      	cmp	r3, #48	; 0x30
 8002f7a:	d86b      	bhi.n	8003054 <HAL_TIM_ConfigClockSource+0x168>
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d060      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x156>
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d867      	bhi.n	8003054 <HAL_TIM_ConfigClockSource+0x168>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d05c      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x156>
 8002f88:	2b10      	cmp	r3, #16
 8002f8a:	d05a      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f8c:	e062      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6899      	ldr	r1, [r3, #8]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f000 faee 	bl	800357e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	609a      	str	r2, [r3, #8]
      break;
 8002fba:	e04e      	b.n	800305a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6899      	ldr	r1, [r3, #8]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f000 fad7 	bl	800357e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fde:	609a      	str	r2, [r3, #8]
      break;
 8002fe0:	e03b      	b.n	800305a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f000 fa4e 	bl	8003490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2150      	movs	r1, #80	; 0x50
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 faa5 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8003000:	e02b      	b.n	800305a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	461a      	mov	r2, r3
 8003010:	f000 fa6c 	bl	80034ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2160      	movs	r1, #96	; 0x60
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fa95 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8003020:	e01b      	b.n	800305a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	461a      	mov	r2, r3
 8003030:	f000 fa2e 	bl	8003490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2140      	movs	r1, #64	; 0x40
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fa85 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8003040:	e00b      	b.n	800305a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4619      	mov	r1, r3
 800304c:	4610      	mov	r0, r2
 800304e:	f000 fa7c 	bl	800354a <TIM_ITRx_SetConfig>
        break;
 8003052:	e002      	b.n	800305a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003054:	bf00      	nop
 8003056:	e000      	b.n	800305a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003058:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a29      	ldr	r2, [pc, #164]	; (8003174 <TIM_Base_SetConfig+0xb8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00b      	beq.n	80030ec <TIM_Base_SetConfig+0x30>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030da:	d007      	beq.n	80030ec <TIM_Base_SetConfig+0x30>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a26      	ldr	r2, [pc, #152]	; (8003178 <TIM_Base_SetConfig+0xbc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <TIM_Base_SetConfig+0x30>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a25      	ldr	r2, [pc, #148]	; (800317c <TIM_Base_SetConfig+0xc0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d108      	bne.n	80030fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1c      	ldr	r2, [pc, #112]	; (8003174 <TIM_Base_SetConfig+0xb8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00b      	beq.n	800311e <TIM_Base_SetConfig+0x62>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310c:	d007      	beq.n	800311e <TIM_Base_SetConfig+0x62>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <TIM_Base_SetConfig+0xbc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d003      	beq.n	800311e <TIM_Base_SetConfig+0x62>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a18      	ldr	r2, [pc, #96]	; (800317c <TIM_Base_SetConfig+0xc0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d108      	bne.n	8003130 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <TIM_Base_SetConfig+0xb8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d103      	bne.n	8003164 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	615a      	str	r2, [r3, #20]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800

08003180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f023 0201 	bic.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f023 0302 	bic.w	r3, r3, #2
 80031c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <TIM_OC1_SetConfig+0xc8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10c      	bne.n	80031f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 0308 	bic.w	r3, r3, #8
 80031e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a13      	ldr	r2, [pc, #76]	; (8003248 <TIM_OC1_SetConfig+0xc8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d111      	bne.n	8003222 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	621a      	str	r2, [r3, #32]
}
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40012c00 	.word	0x40012c00

0800324c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f023 0210 	bic.w	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f023 0320 	bic.w	r3, r3, #32
 8003296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a1d      	ldr	r2, [pc, #116]	; (800331c <TIM_OC2_SetConfig+0xd0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d10d      	bne.n	80032c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a14      	ldr	r2, [pc, #80]	; (800331c <TIM_OC2_SetConfig+0xd0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d113      	bne.n	80032f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40012c00 	.word	0x40012c00

08003320 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <TIM_OC3_SetConfig+0xd0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10d      	bne.n	800339a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	021b      	lsls	r3, r3, #8
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <TIM_OC3_SetConfig+0xd0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d113      	bne.n	80033ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	621a      	str	r2, [r3, #32]
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40012c00 	.word	0x40012c00

080033f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800343e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	031b      	lsls	r3, r3, #12
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a0f      	ldr	r2, [pc, #60]	; (800348c <TIM_OC4_SetConfig+0x98>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d109      	bne.n	8003468 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800345a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	019b      	lsls	r3, r3, #6
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	621a      	str	r2, [r3, #32]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	40012c00 	.word	0x40012c00

08003490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f023 0201 	bic.w	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f023 030a 	bic.w	r3, r3, #10
 80034cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	621a      	str	r2, [r3, #32]
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f023 0210 	bic.w	r2, r3, #16
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003516:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	031b      	lsls	r3, r3, #12
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003528:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	621a      	str	r2, [r3, #32]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	f043 0307 	orr.w	r3, r3, #7
 800356c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr

0800357e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800357e:	b480      	push	{r7}
 8003580:	b087      	sub	sp, #28
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003598:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	021a      	lsls	r2, r3, #8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	609a      	str	r2, [r3, #8]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2201      	movs	r2, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1a      	ldr	r2, [r3, #32]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	43db      	mvns	r3, r3
 80035de:	401a      	ands	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a1a      	ldr	r2, [r3, #32]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	fa01 f303 	lsl.w	r3, r1, r3
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003618:	2302      	movs	r3, #2
 800361a:	e046      	b.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00e      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d009      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a10      	ldr	r2, [pc, #64]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d10c      	bne.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4313      	orrs	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800

080036c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e03f      	b.n	8003776 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd fef0 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f829 	bl	8003780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800373c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800374c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800375c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037ba:	f023 030c 	bic.w	r3, r3, #12
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2c      	ldr	r2, [pc, #176]	; (8003894 <UART_SetConfig+0x114>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d103      	bne.n	80037f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7fe fed4 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	e002      	b.n	80037f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037f0:	f7fe febc 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 80037f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009a      	lsls	r2, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	4a22      	ldr	r2, [pc, #136]	; (8003898 <UART_SetConfig+0x118>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	0119      	lsls	r1, r3, #4
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009a      	lsls	r2, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	fbb2 f2f3 	udiv	r2, r2, r3
 800382c:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <UART_SetConfig+0x118>)
 800382e:	fba3 0302 	umull	r0, r3, r3, r2
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2064      	movs	r0, #100	; 0x64
 8003836:	fb00 f303 	mul.w	r3, r0, r3
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	3332      	adds	r3, #50	; 0x32
 8003840:	4a15      	ldr	r2, [pc, #84]	; (8003898 <UART_SetConfig+0x118>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800384c:	4419      	add	r1, r3
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009a      	lsls	r2, r3, #2
 8003858:	441a      	add	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	fbb2 f2f3 	udiv	r2, r2, r3
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <UART_SetConfig+0x118>)
 8003866:	fba3 0302 	umull	r0, r3, r3, r2
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2064      	movs	r0, #100	; 0x64
 800386e:	fb00 f303 	mul.w	r3, r0, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	3332      	adds	r3, #50	; 0x32
 8003878:	4a07      	ldr	r2, [pc, #28]	; (8003898 <UART_SetConfig+0x118>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 020f 	and.w	r2, r3, #15
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	440a      	add	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40013800 	.word	0x40013800
 8003898:	51eb851f 	.word	0x51eb851f

0800389c <MotorDriverDriverEnable>:
	}
	return result;
}
//==============================================================================
MotorDriverResult MotorDriverDriverEnable(MotorDriverT* driver)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	if (driver->Status.DriverState == MotorDriverDriverStateDisable)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	7b1b      	ldrb	r3, [r3, #12]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <MotorDriverDriverEnable+0x2c>
	{
		driver->EnableDelay = driver->Options.EnableDelay;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		driver->Status.DriverState = MotorDriverDriverStateEnabling;
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	7b13      	ldrb	r3, [r2, #12]
 80038c0:	2101      	movs	r1, #1
 80038c2:	f361 0383 	bfi	r3, r1, #2, #2
 80038c6:	7313      	strb	r3, [r2, #12]
	}
	return MotorDriverResultAccept;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <MotorDriverDriverDisable>:
//==============================================================================
MotorDriverResult MotorDriverDriverDisable(MotorDriverT* driver)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	driver->Status.DriverState = MotorDriverDriverStateDisable;
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	7b13      	ldrb	r3, [r2, #12]
 80038e0:	f36f 0383 	bfc	r3, #2, #2
 80038e4:	7313      	strb	r3, [r2, #12]
	return driver->Control->SetDriverState(driver, MotorDriverStateDisable);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	2100      	movs	r1, #0
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
 80038f2:	4603      	mov	r3, r0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <MotorDriverHandler>:
	driver->Status.MotorState = MotorDriverMotorStateStopped;
	return driver->Control->SetMoveState(driver, MotorDriverStateDisable);
}
//==============================================================================
void MotorDriverHandler(MotorDriverT* driver)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	int diferense;
	
	switch((uint8_t)driver->Status.DriverState)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7b1b      	ldrb	r3, [r3, #12]
 8003908:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d021      	beq.n	8003956 <MotorDriverHandler+0x5a>
 8003912:	2b02      	cmp	r3, #2
 8003914:	dc39      	bgt.n	800398a <MotorDriverHandler+0x8e>
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80d9 	beq.w	8003ace <MotorDriverHandler+0x1d2>
 800391c:	2b01      	cmp	r3, #1
 800391e:	d134      	bne.n	800398a <MotorDriverHandler+0x8e>
	{
		case MotorDriverDriverStateEnabling:
			if (!driver->EnableDelay)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10c      	bne.n	8003944 <MotorDriverHandler+0x48>
			{
				driver->Status.DriverState = MotorDriverDriverStateIsEnable;
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	7b13      	ldrb	r3, [r2, #12]
 800392e:	2102      	movs	r1, #2
 8003930:	f361 0383 	bfi	r3, r1, #2, #2
 8003934:	7313      	strb	r3, [r2, #12]
				driver->Control->SetDriverState(driver, MotorDriverStateEnable);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	2101      	movs	r1, #1
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
			}
			else
			{
				driver->EnableDelay--;
			}
			return;
 8003942:	e0c7      	b.n	8003ad4 <MotorDriverHandler+0x1d8>
				driver->EnableDelay--;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			return;
 8003954:	e0be      	b.n	8003ad4 <MotorDriverHandler+0x1d8>
			
		case MotorDriverDriverStateIsEnable:
			if (driver->Status.MotorState == MotorDriverMotorStateStopped)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7b1b      	ldrb	r3, [r3, #12]
 800395a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d111      	bne.n	8003988 <MotorDriverHandler+0x8c>
			{
				if (driver->DisableDelay)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <MotorDriverHandler+0x84>
				{
					driver->DisableDelay--;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
				}
				else
				{
					 MotorDriverDriverDisable(driver);
				}
				return;
 800397e:	e0a9      	b.n	8003ad4 <MotorDriverHandler+0x1d8>
					 MotorDriverDriverDisable(driver);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ffa7 	bl	80038d4 <MotorDriverDriverDisable>
				return;
 8003986:	e0a5      	b.n	8003ad4 <MotorDriverHandler+0x1d8>
			}
			break;
 8003988:	bf00      	nop
			
		case MotorDriverDriverStateDisable:
			return;
	}
	
	switch((uint8_t)driver->Status.MotorState)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	7b1b      	ldrb	r3, [r3, #12]
 800398e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d014      	beq.n	80039c2 <MotorDriverHandler+0xc6>
 8003998:	2b02      	cmp	r3, #2
 800399a:	f300 809b 	bgt.w	8003ad4 <MotorDriverHandler+0x1d8>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8097 	beq.w	8003ad2 <MotorDriverHandler+0x1d6>
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	f040 8095 	bne.w	8003ad4 <MotorDriverHandler+0x1d8>
	{
		case MotorDriverMotorStateStartingMove:
			driver->Status.MotorState = MotorDriverMotorStateInMoving;
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	7b13      	ldrb	r3, [r2, #12]
 80039ae:	2102      	movs	r1, #2
 80039b0:	f361 1305 	bfi	r3, r1, #4, #2
 80039b4:	7313      	strb	r3, [r2, #12]
			driver->Control->SetMoveState(driver, MotorDriverStateEnable);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2101      	movs	r1, #1
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
			
		case MotorDriverMotorStateInMoving:
			if (driver->MoveTime > driver->CalculatedValues.DecelerationTime)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	461a      	mov	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d933      	bls.n	8003a38 <MotorDriverHandler+0x13c>
			{
				if (driver->Speed > driver->Options.StopSpeed)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7fc fe82 	bl	80006e4 <__aeabi_fcmpgt>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d05b      	beq.n	8003a9e <MotorDriverHandler+0x1a2>
				{
					driver->Speed -= driver->CalculatedValues.DecelerationStep;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f7fc fbb1 	bl	8000158 <__aeabi_fsub>
 80039f6:	4603      	mov	r3, r0
 80039f8:	461a      	mov	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	65da      	str	r2, [r3, #92]	; 0x5c
					if (driver->Speed < driver->Options.StopSpeed)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7fc fe4d 	bl	80006a8 <__aeabi_fcmplt>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <MotorDriverHandler+0x120>
					{
						driver->Speed = driver->Options.StopSpeed;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	65da      	str	r2, [r3, #92]	; 0x5c
					}
					driver->DebugValues.DecelerationTime++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
					driver->Control->SetSpeed(driver, driver->Speed);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a30:	4611      	mov	r1, r2
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
 8003a36:	e032      	b.n	8003a9e <MotorDriverHandler+0x1a2>
				}
			}
			else if (driver->Speed < driver->SpeedRequest)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f7fc fe30 	bl	80006a8 <__aeabi_fcmplt>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d027      	beq.n	8003a9e <MotorDriverHandler+0x1a2>
			{
				driver->Speed += driver->CalculatedValues.AccelerationStep;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	4619      	mov	r1, r3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	f7fc fb7f 	bl	800015c <__addsf3>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	65da      	str	r2, [r3, #92]	; 0x5c
				if (driver->Speed > driver->SpeedRequest)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f7fc fe37 	bl	80006e4 <__aeabi_fcmpgt>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <MotorDriverHandler+0x188>
				{
					driver->Speed = driver->SpeedRequest;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				driver->DebugValues.AccelerationTime++;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
				driver->Control->SetSpeed(driver, driver->Speed);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a98:	4611      	mov	r1, r2
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
			}
			
			if (driver->MoveTime >= driver->MoveTimeRequest)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	db0b      	blt.n	8003ac2 <MotorDriverHandler+0x1c6>
			{
				driver->Status.MotorState = MotorDriverMotorStateStopped;
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	7b13      	ldrb	r3, [r2, #12]
 8003aae:	f36f 1305 	bfc	r3, #4, #2
 8003ab2:	7313      	strb	r3, [r2, #12]
				driver->Control->SetMoveState(driver, MotorDriverStateDisable);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2100      	movs	r1, #0
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
			}
			else
			{
				driver->MoveTime += 1;
			}
			return;
 8003ac0:	e008      	b.n	8003ad4 <MotorDriverHandler+0x1d8>
				driver->MoveTime += 1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54
			return;
 8003acc:	e002      	b.n	8003ad4 <MotorDriverHandler+0x1d8>
			return;
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <MotorDriverHandler+0x1d8>
			
		case MotorDriverMotorStateStopped:
			return;
 8003ad2:	bf00      	nop
	}
}
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <MotorDriverPWMHandler>:
//==============================================================================
void MotorDriverPWMHandler(MotorDriverT* driver)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
	if (driver->Position != driver->PositionRequest)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d008      	beq.n	8003b00 <MotorDriverPWMHandler+0x26>
	{
		driver->Position += driver->Diraction;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	f992 2060 	ldrsb.w	r2, [r2, #96]	; 0x60
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	64da      	str	r2, [r3, #76]	; 0x4c
	else
	{
		driver->Status.MotorState = MotorDriverMotorStateStopped;
		driver->Control->SetMoveState(driver, MotorDriverStateDisable);
	}
}
 8003afe:	e00a      	b.n	8003b16 <MotorDriverPWMHandler+0x3c>
		driver->Status.MotorState = MotorDriverMotorStateStopped;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	7b13      	ldrb	r3, [r2, #12]
 8003b04:	f36f 1305 	bfc	r3, #4, #2
 8003b08:	7313      	strb	r3, [r2, #12]
		driver->Control->SetMoveState(driver, MotorDriverStateDisable);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2100      	movs	r1, #0
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <MotorDriverInit>:
//==============================================================================
MotorDriverResult MotorDriverInit(MotorDriverT* driver,
														void* parent,
														MotorDriverControlT* control,
														MotorDriverOptionsT* options)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
	if (driver && control)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d020      	beq.n	8003b76 <MotorDriverInit+0x56>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01d      	beq.n	8003b76 <MotorDriverInit+0x56>
	{
		if (!driver->Description)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <MotorDriverInit+0x28>
		{
			driver->Description = "MotorDriverT";
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <MotorDriverInit+0x64>)
 8003b46:	601a      	str	r2, [r3, #0]
		}
		
		driver->Parent = parent;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	605a      	str	r2, [r3, #4]
		driver->Control = control;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	609a      	str	r2, [r3, #8]
		
		if (options)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <MotorDriverInit+0x48>
		{
			memcpy((uint8_t*)&driver->Options, options, sizeof(MotorDriverOptionsT));
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3310      	adds	r3, #16
 8003b5e:	2218      	movs	r2, #24
 8003b60:	6839      	ldr	r1, [r7, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f002 fe94 	bl	8006890 <memcpy>
		}
		
		driver->Status.IsInit = true;
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	7b13      	ldrb	r3, [r2, #12]
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	7313      	strb	r3, [r2, #12]
		
		return MotorDriverResultAccept;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e001      	b.n	8003b7a <MotorDriverInit+0x5a>
	}
	return MotorDriverResultNullPointer;
 8003b76:	f06f 0302 	mvn.w	r3, #2
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08006908 	.word	0x08006908

08003b88 <CalculationRacingFallingForSteps>:
//==============================================================================
static MotorDriverResult CalculationRacingFallingForSteps(MotorDriverT* driver)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	float steps = (driver->PositionRequest - driver->Position) * driver->Diraction;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	f992 2060 	ldrsb.w	r2, [r2, #96]	; 0x60
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fc fb8d 	bl	80002c4 <__aeabi_i2f>
 8003baa:	4603      	mov	r3, r0
 8003bac:	617b      	str	r3, [r7, #20]
  float speed = driver->Options.StartSpeed;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	613b      	str	r3, [r7, #16]
  float speed_offset = 0;
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
	uint32_t time_move = driver->MoveTimeRequest;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbe:	60bb      	str	r3, [r7, #8]
	
	driver->CalculatedValues.dxAccelerationSteps = 0;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
	driver->CalculatedValues.dxDecelerationSteps = 0;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	63da      	str	r2, [r3, #60]	; 0x3c
	
	driver->CalculatedValues.AccelerationTime = 0;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
	driver->CalculatedValues.DecelerationTime = 0;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	635a      	str	r2, [r3, #52]	; 0x34
	
	driver->DebugValues.AccelerationTime = 0;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
	driver->DebugValues.DecelerationTime = 0;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
	
  while (speed < driver->SpeedRequest && steps > 0 && time_move)
 8003be8:	e06e      	b.n	8003cc8 <CalculationRacingFallingForSteps+0x140>
  {
    if ((speed - speed_offset) > driver->Options.StopSpeed)
 8003bea:	68f9      	ldr	r1, [r7, #12]
 8003bec:	6938      	ldr	r0, [r7, #16]
 8003bee:	f7fc fab3 	bl	8000158 <__aeabi_fsub>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f7fc fd71 	bl	80006e4 <__aeabi_fcmpgt>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d033      	beq.n	8003c70 <CalculationRacingFallingForSteps+0xe8>
    {
			driver->CalculatedValues.dxDecelerationSteps += (speed - speed_offset) / 2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8003c0c:	68f9      	ldr	r1, [r7, #12]
 8003c0e:	6938      	ldr	r0, [r7, #16]
 8003c10:	f7fc faa2 	bl	8000158 <__aeabi_fsub>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fc fc5a 	bl	80004d4 <__aeabi_fdiv>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4619      	mov	r1, r3
 8003c24:	4620      	mov	r0, r4
 8003c26:	f7fc fa99 	bl	800015c <__addsf3>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	63da      	str	r2, [r3, #60]	; 0x3c
			steps -= (speed - speed_offset) / 2;
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	6938      	ldr	r0, [r7, #16]
 8003c36:	f7fc fa8f 	bl	8000158 <__aeabi_fsub>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc fc47 	bl	80004d4 <__aeabi_fdiv>
 8003c46:	4603      	mov	r3, r0
 8003c48:	4619      	mov	r1, r3
 8003c4a:	6978      	ldr	r0, [r7, #20]
 8003c4c:	f7fc fa84 	bl	8000158 <__aeabi_fsub>
 8003c50:	4603      	mov	r3, r0
 8003c52:	617b      	str	r3, [r7, #20]
      speed_offset += driver->CalculatedValues.DecelerationStep;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4619      	mov	r1, r3
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f7fc fa7e 	bl	800015c <__addsf3>
 8003c60:	4603      	mov	r3, r0
 8003c62:	60fb      	str	r3, [r7, #12]
      driver->CalculatedValues.DecelerationTime++;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003c6e:	e028      	b.n	8003cc2 <CalculationRacingFallingForSteps+0x13a>
    }
    else
		{
			driver->CalculatedValues.dxAccelerationSteps += (speed) / 2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003c74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c78:	6938      	ldr	r0, [r7, #16]
 8003c7a:	f7fc fc2b 	bl	80004d4 <__aeabi_fdiv>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4619      	mov	r1, r3
 8003c82:	4620      	mov	r0, r4
 8003c84:	f7fc fa6a 	bl	800015c <__addsf3>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38
			steps -= (speed) / 2;
 8003c90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c94:	6938      	ldr	r0, [r7, #16]
 8003c96:	f7fc fc1d 	bl	80004d4 <__aeabi_fdiv>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	f7fc fa5a 	bl	8000158 <__aeabi_fsub>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	617b      	str	r3, [r7, #20]
      speed += driver->CalculatedValues.AccelerationStep;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	4619      	mov	r1, r3
 8003cae:	6938      	ldr	r0, [r7, #16]
 8003cb0:	f7fc fa54 	bl	800015c <__addsf3>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	613b      	str	r3, [r7, #16]
      driver->CalculatedValues.AccelerationTime++;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
    }
		
		time_move--;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	60bb      	str	r3, [r7, #8]
  while (speed < driver->SpeedRequest && steps > 0 && time_move)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	4619      	mov	r1, r3
 8003cce:	6938      	ldr	r0, [r7, #16]
 8003cd0:	f7fc fcea 	bl	80006a8 <__aeabi_fcmplt>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <CalculationRacingFallingForSteps+0x16a>
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	6978      	ldr	r0, [r7, #20]
 8003ce0:	f7fc fd00 	bl	80006e4 <__aeabi_fcmpgt>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <CalculationRacingFallingForSteps+0x16a>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f47f af7c 	bne.w	8003bea <CalculationRacingFallingForSteps+0x62>
	}
	
	if (steps < 0)
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	6978      	ldr	r0, [r7, #20]
 8003cf8:	f7fc fcd6 	bl	80006a8 <__aeabi_fcmplt>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <CalculationRacingFallingForSteps+0x180>
	{
		steps = 0;
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
	}
	
	//time_move = steps / speed;
	
	if (!time_move)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <CalculationRacingFallingForSteps+0x198>
	{
		driver->CalculatedValues.DecelerationTime = driver->MoveTimeRequest - driver->CalculatedValues.DecelerationTime;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d12:	461a      	mov	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	1ad2      	subs	r2, r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d1e:	e015      	b.n	8003d4c <CalculationRacingFallingForSteps+0x1c4>
	}
	else
	{
		driver->CalculatedValues.DecelerationTime = driver->CalculatedValues.AccelerationTime + steps / speed;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fc fac9 	bl	80002bc <__aeabi_ui2f>
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	6939      	ldr	r1, [r7, #16]
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f7fc fbd0 	bl	80004d4 <__aeabi_fdiv>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4619      	mov	r1, r3
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f7fc fa0f 	bl	800015c <__addsf3>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fc fcd9 	bl	80006f8 <__aeabi_f2uiz>
 8003d46:	4602      	mov	r2, r0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	
	return MotorDriverResultAccept;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd90      	pop	{r4, r7, pc}

08003d56 <MotorDriverSetPosition>:
MotorDriverResult MotorDriverSetPosition(MotorDriverT* driver,
														MotorDriverMotorOptionsT* options,
														int position,
														float speed,
														int move_time)
{
 8003d56:	b590      	push	{r4, r7, lr}
 8003d58:	b087      	sub	sp, #28
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	603b      	str	r3, [r7, #0]
	MotorDriverResult result;
	driver->Control->SetLockState(driver, MotorDriverStateEnable);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	4798      	blx	r3
	
	if (driver->Status.MotorState != MotorDriverMotorStateStopped)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	7b1b      	ldrb	r3, [r3, #12]
 8003d74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <MotorDriverSetPosition+0x2e>
	{
		result = MotorDriverResultBusy;
 8003d7e:	23fe      	movs	r3, #254	; 0xfe
 8003d80:	75fb      	strb	r3, [r7, #23]
		goto end;
 8003d82:	e080      	b.n	8003e86 <MotorDriverSetPosition+0x130>
	}
	
	if (options)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d006      	beq.n	8003d98 <MotorDriverSetPosition+0x42>
	{
		memcpy((uint8_t*)&driver->Options, options, sizeof(MotorDriverOptionsT));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3310      	adds	r3, #16
 8003d8e:	2218      	movs	r2, #24
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f002 fd7c 	bl	8006890 <memcpy>
	}
	
	if (move_time == 0)
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <MotorDriverSetPosition+0x4e>
	{
		result = MotorDriverResultInvalidParameter;
 8003d9e:	23fc      	movs	r3, #252	; 0xfc
 8003da0:	75fb      	strb	r3, [r7, #23]
		goto end;
 8003da2:	e070      	b.n	8003e86 <MotorDriverSetPosition+0x130>
	}
	
	if (speed <= 0)
 8003da4:	f04f 0100 	mov.w	r1, #0
 8003da8:	6838      	ldr	r0, [r7, #0]
 8003daa:	f7fc fc87 	bl	80006bc <__aeabi_fcmple>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <MotorDriverSetPosition+0x64>
	{
		result = MotorDriverResultInvalidParameter;
 8003db4:	23fc      	movs	r3, #252	; 0xfc
 8003db6:	75fb      	strb	r3, [r7, #23]
		goto end;
 8003db8:	e065      	b.n	8003e86 <MotorDriverSetPosition+0x130>
	}
	
	if (driver->PositionRequest < position)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	dd04      	ble.n	8003dce <MotorDriverSetPosition+0x78>
	{
		driver->Diraction = MotorDriverMoveDiractionForward;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003dcc:	e00c      	b.n	8003de8 <MotorDriverSetPosition+0x92>
	}
	else if (driver->PositionRequest > position)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	da04      	bge.n	8003de2 <MotorDriverSetPosition+0x8c>
	{
		driver->Diraction = MotorDriverMoveDiractionBackward;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	22ff      	movs	r2, #255	; 0xff
 8003ddc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003de0:	e002      	b.n	8003de8 <MotorDriverSetPosition+0x92>
	}
	else
	{
		result = MotorDriverResultInvalidParameter;
 8003de2:	23fc      	movs	r3, #252	; 0xfc
 8003de4:	75fb      	strb	r3, [r7, #23]
		goto end;
 8003de6:	e04e      	b.n	8003e86 <MotorDriverSetPosition+0x130>
	}
	
	driver->MoveTime = 0;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
	driver->MoveTimeRequest = move_time;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df2:	651a      	str	r2, [r3, #80]	; 0x50
	driver->SpeedRequest = speed;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	659a      	str	r2, [r3, #88]	; 0x58
	driver->PositionRequest = position;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	649a      	str	r2, [r3, #72]	; 0x48
	driver->Speed = driver->Options.StartSpeed;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	699a      	ldr	r2, [r3, #24]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	65da      	str	r2, [r3, #92]	; 0x5c
	driver->DisableDelay = driver->Options.DisableDelay;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8c1a      	ldrh	r2, [r3, #32]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	driver->CalculatedValues.AccelerationStep = driver->Options.Acceleration / driver->Options.HandlerUpdateFrequency;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691c      	ldr	r4, [r3, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fc fa4e 	bl	80002bc <__aeabi_ui2f>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4619      	mov	r1, r3
 8003e24:	4620      	mov	r0, r4
 8003e26:	f7fc fb55 	bl	80004d4 <__aeabi_fdiv>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28
	driver->CalculatedValues.DecelerationStep = driver->Options.Deceleration / driver->Options.HandlerUpdateFrequency;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	695c      	ldr	r4, [r3, #20]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc fa3e 	bl	80002bc <__aeabi_ui2f>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4619      	mov	r1, r3
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7fc fb45 	bl	80004d4 <__aeabi_fdiv>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	62da      	str	r2, [r3, #44]	; 0x2c
	
	//CalculationRacingFallingForTime(driver);
	CalculationRacingFallingForSteps(driver);
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff fe98 	bl	8003b88 <CalculationRacingFallingForSteps>

	driver->Control->SetSpeed(driver, driver->Speed);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e62:	4611      	mov	r1, r2
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	4798      	blx	r3
	//driver->Control->SetFrequency(driver, driver->Options.Frequency);
	driver->Control->SetPWMHandlerState(driver, MotorDriverStateEnable);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	2101      	movs	r1, #1
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	4798      	blx	r3
	MotorDriverDriverEnable(driver);
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff fd11 	bl	800389c <MotorDriverDriverEnable>
	driver->Status.MotorState = MotorDriverMotorStateStartingMove;
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	7b13      	ldrb	r3, [r2, #12]
 8003e7e:	2101      	movs	r1, #1
 8003e80:	f361 1305 	bfi	r3, r1, #4, #2
 8003e84:	7313      	strb	r3, [r2, #12]
	
	end:;
	driver->Control->SetLockState(driver, MotorDriverStateDisable);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	4798      	blx	r3
	return result;
 8003e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd90      	pop	{r4, r7, pc}
	...

08003ea0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ea6:	f3ef 8305 	mrs	r3, IPSR
 8003eaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb6:	607b      	str	r3, [r7, #4]
  return(result);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <osKernelInitialize+0x32>
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <osKernelInitialize+0x60>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d109      	bne.n	8003eda <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8003eca:	603b      	str	r3, [r7, #0]
  return(result);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003ed2:	f06f 0305 	mvn.w	r3, #5
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e00c      	b.n	8003ef4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <osKernelInitialize+0x60>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <osKernelInitialize+0x60>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	e002      	b.n	8003ef4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003eee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	20000058 	.word	0x20000058

08003f04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f0a:	f3ef 8305 	mrs	r3, IPSR
 8003f0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f16:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1a:	607b      	str	r3, [r7, #4]
  return(result);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <osKernelStart+0x32>
 8003f22:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <osKernelStart+0x64>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d109      	bne.n	8003f3e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f36:	f06f 0305 	mvn.w	r3, #5
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e00e      	b.n	8003f5c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <osKernelStart+0x64>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003f46:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <osKernelStart+0x64>)
 8003f48:	2202      	movs	r2, #2
 8003f4a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003f4c:	f001 fc3e 	bl	80057cc <vTaskStartScheduler>
      stat = osOK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e002      	b.n	8003f5c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000058 	.word	0x20000058

08003f6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b092      	sub	sp, #72	; 0x48
 8003f70:	af04      	add	r7, sp, #16
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f7c:	f3ef 8305 	mrs	r3, IPSR
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f040 8094 	bne.w	80040b2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8e:	623b      	str	r3, [r7, #32]
  return(result);
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f040 808d 	bne.w	80040b2 <osThreadNew+0x146>
 8003f98:	4b48      	ldr	r3, [pc, #288]	; (80040bc <osThreadNew+0x150>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d106      	bne.n	8003fae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8003fa4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f040 8082 	bne.w	80040b2 <osThreadNew+0x146>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d07e      	beq.n	80040b2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003fb8:	2318      	movs	r3, #24
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003fc0:	f107 031b 	add.w	r3, r7, #27
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d045      	beq.n	800405e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <osThreadNew+0x74>
        name = attr->name;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <osThreadNew+0x9a>
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	2b38      	cmp	r3, #56	; 0x38
 8003ff8:	d805      	bhi.n	8004006 <osThreadNew+0x9a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <osThreadNew+0x9e>
        return (NULL);
 8004006:	2300      	movs	r3, #0
 8004008:	e054      	b.n	80040b4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00e      	beq.n	8004040 <osThreadNew+0xd4>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b5b      	cmp	r3, #91	; 0x5b
 8004028:	d90a      	bls.n	8004040 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <osThreadNew+0xd4>
        mem = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
 800403e:	e010      	b.n	8004062 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10c      	bne.n	8004062 <osThreadNew+0xf6>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d108      	bne.n	8004062 <osThreadNew+0xf6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d104      	bne.n	8004062 <osThreadNew+0xf6>
          mem = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	62bb      	str	r3, [r7, #40]	; 0x28
 800405c:	e001      	b.n	8004062 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	2b01      	cmp	r3, #1
 8004066:	d110      	bne.n	800408a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004070:	9202      	str	r2, [sp, #8]
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f001 f9d8 	bl	8005434 <xTaskCreateStatic>
 8004084:	4603      	mov	r3, r0
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e013      	b.n	80040b2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	2b00      	cmp	r3, #0
 800408e:	d110      	bne.n	80040b2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	b29a      	uxth	r2, r3
 8004094:	f107 0314 	add.w	r3, r7, #20
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f001 fa22 	bl	80054ec <xTaskCreate>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <osThreadNew+0x146>
          hTask = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040b2:	697b      	ldr	r3, [r7, #20]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3738      	adds	r7, #56	; 0x38
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000058 	.word	0x20000058

080040c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040c8:	f3ef 8305 	mrs	r3, IPSR
 80040cc:	613b      	str	r3, [r7, #16]
  return(result);
 80040ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10f      	bne.n	80040f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d4:	f3ef 8310 	mrs	r3, PRIMASK
 80040d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <osDelay+0x34>
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <osDelay+0x58>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d109      	bne.n	80040fc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040e8:	f3ef 8311 	mrs	r3, BASEPRI
 80040ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <osDelay+0x3c>
    stat = osErrorISR;
 80040f4:	f06f 0305 	mvn.w	r3, #5
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	e007      	b.n	800410c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f001 fb2c 	bl	8005764 <vTaskDelay>
    }
  }

  return (stat);
 800410c:	697b      	ldr	r3, [r7, #20]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000058 	.word	0x20000058

0800411c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a06      	ldr	r2, [pc, #24]	; (8004144 <vApplicationGetIdleTaskMemory+0x28>)
 800412c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4a05      	ldr	r2, [pc, #20]	; (8004148 <vApplicationGetIdleTaskMemory+0x2c>)
 8004132:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	601a      	str	r2, [r3, #0]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	2000005c 	.word	0x2000005c
 8004148:	200000b8 	.word	0x200000b8

0800414c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a07      	ldr	r2, [pc, #28]	; (8004178 <vApplicationGetTimerTaskMemory+0x2c>)
 800415c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4a06      	ldr	r2, [pc, #24]	; (800417c <vApplicationGetTimerTaskMemory+0x30>)
 8004162:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800416a:	601a      	str	r2, [r3, #0]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	200002b8 	.word	0x200002b8
 800417c:	20000314 	.word	0x20000314

08004180 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	; 0x28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800418c:	f001 fb84 	bl	8005898 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004190:	4b58      	ldr	r3, [pc, #352]	; (80042f4 <pvPortMalloc+0x174>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004198:	f000 f910 	bl	80043bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800419c:	4b56      	ldr	r3, [pc, #344]	; (80042f8 <pvPortMalloc+0x178>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f040 808e 	bne.w	80042c6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01d      	beq.n	80041ec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041b0:	2208      	movs	r2, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4413      	add	r3, r2
 80041b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d014      	beq.n	80041ec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f023 0307 	bic.w	r3, r3, #7
 80041c8:	3308      	adds	r3, #8
 80041ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d069      	beq.n	80042c6 <pvPortMalloc+0x146>
 80041f2:	4b42      	ldr	r3, [pc, #264]	; (80042fc <pvPortMalloc+0x17c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d864      	bhi.n	80042c6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041fc:	4b40      	ldr	r3, [pc, #256]	; (8004300 <pvPortMalloc+0x180>)
 80041fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004200:	4b3f      	ldr	r3, [pc, #252]	; (8004300 <pvPortMalloc+0x180>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004206:	e004      	b.n	8004212 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d903      	bls.n	8004224 <pvPortMalloc+0xa4>
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f1      	bne.n	8004208 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004224:	4b33      	ldr	r3, [pc, #204]	; (80042f4 <pvPortMalloc+0x174>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422a:	429a      	cmp	r2, r3
 800422c:	d04b      	beq.n	80042c6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2208      	movs	r2, #8
 8004234:	4413      	add	r3, r2
 8004236:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	1ad2      	subs	r2, r2, r3
 8004248:	2308      	movs	r3, #8
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	429a      	cmp	r2, r3
 800424e:	d91f      	bls.n	8004290 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <pvPortMalloc+0xf8>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	613b      	str	r3, [r7, #16]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	1ad2      	subs	r2, r2, r3
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800428a:	69b8      	ldr	r0, [r7, #24]
 800428c:	f000 f8f8 	bl	8004480 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004290:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <pvPortMalloc+0x17c>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	4a18      	ldr	r2, [pc, #96]	; (80042fc <pvPortMalloc+0x17c>)
 800429c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800429e:	4b17      	ldr	r3, [pc, #92]	; (80042fc <pvPortMalloc+0x17c>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4b18      	ldr	r3, [pc, #96]	; (8004304 <pvPortMalloc+0x184>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d203      	bcs.n	80042b2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042aa:	4b14      	ldr	r3, [pc, #80]	; (80042fc <pvPortMalloc+0x17c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a15      	ldr	r2, [pc, #84]	; (8004304 <pvPortMalloc+0x184>)
 80042b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <pvPortMalloc+0x178>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042c6:	f001 faf5 	bl	80058b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <pvPortMalloc+0x16a>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	60fb      	str	r3, [r7, #12]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <pvPortMalloc+0x168>
	return pvReturn;
 80042ea:	69fb      	ldr	r3, [r7, #28]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3728      	adds	r7, #40	; 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	2000131c 	.word	0x2000131c
 80042f8:	20001328 	.word	0x20001328
 80042fc:	20001320 	.word	0x20001320
 8004300:	20001314 	.word	0x20001314
 8004304:	20001324 	.word	0x20001324

08004308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d048      	beq.n	80043ac <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800431a:	2308      	movs	r3, #8
 800431c:	425b      	negs	r3, r3
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4413      	add	r3, r2
 8004322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <vPortFree+0xac>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <vPortFree+0x44>
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	60fb      	str	r3, [r7, #12]
}
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <vPortFree+0x62>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60bb      	str	r3, [r7, #8]
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <vPortFree+0xac>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d019      	beq.n	80043ac <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d115      	bne.n	80043ac <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <vPortFree+0xac>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	43db      	mvns	r3, r3
 800438a:	401a      	ands	r2, r3
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004390:	f001 fa82 	bl	8005898 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <vPortFree+0xb0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4413      	add	r3, r2
 800439e:	4a06      	ldr	r2, [pc, #24]	; (80043b8 <vPortFree+0xb0>)
 80043a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043a2:	6938      	ldr	r0, [r7, #16]
 80043a4:	f000 f86c 	bl	8004480 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80043a8:	f001 fa84 	bl	80058b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043ac:	bf00      	nop
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20001328 	.word	0x20001328
 80043b8:	20001320 	.word	0x20001320

080043bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043c8:	4b27      	ldr	r3, [pc, #156]	; (8004468 <prvHeapInit+0xac>)
 80043ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00c      	beq.n	80043f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3307      	adds	r3, #7
 80043da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0307 	bic.w	r3, r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	4a1f      	ldr	r2, [pc, #124]	; (8004468 <prvHeapInit+0xac>)
 80043ec:	4413      	add	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043f4:	4a1d      	ldr	r2, [pc, #116]	; (800446c <prvHeapInit+0xb0>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043fa:	4b1c      	ldr	r3, [pc, #112]	; (800446c <prvHeapInit+0xb0>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4413      	add	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004408:	2208      	movs	r2, #8
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0307 	bic.w	r3, r3, #7
 8004416:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a15      	ldr	r2, [pc, #84]	; (8004470 <prvHeapInit+0xb4>)
 800441c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <prvHeapInit+0xb4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <prvHeapInit+0xb4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	1ad2      	subs	r2, r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <prvHeapInit+0xb4>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <prvHeapInit+0xb8>)
 800444a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4a09      	ldr	r2, [pc, #36]	; (8004478 <prvHeapInit+0xbc>)
 8004452:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <prvHeapInit+0xc0>)
 8004456:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800445a:	601a      	str	r2, [r3, #0]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000714 	.word	0x20000714
 800446c:	20001314 	.word	0x20001314
 8004470:	2000131c 	.word	0x2000131c
 8004474:	20001324 	.word	0x20001324
 8004478:	20001320 	.word	0x20001320
 800447c:	20001328 	.word	0x20001328

08004480 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004488:	4b27      	ldr	r3, [pc, #156]	; (8004528 <prvInsertBlockIntoFreeList+0xa8>)
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e002      	b.n	8004494 <prvInsertBlockIntoFreeList+0x14>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	429a      	cmp	r2, r3
 800449c:	d8f7      	bhi.n	800448e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	4413      	add	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d108      	bne.n	80044c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	441a      	add	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	441a      	add	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d118      	bne.n	8004508 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4b14      	ldr	r3, [pc, #80]	; (800452c <prvInsertBlockIntoFreeList+0xac>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d00d      	beq.n	80044fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	441a      	add	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e008      	b.n	8004510 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044fe:	4b0b      	ldr	r3, [pc, #44]	; (800452c <prvInsertBlockIntoFreeList+0xac>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e003      	b.n	8004510 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	429a      	cmp	r2, r3
 8004516:	d002      	beq.n	800451e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	20001314 	.word	0x20001314
 800452c:	2000131c 	.word	0x2000131c

08004530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f103 0208 	add.w	r2, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f04f 32ff 	mov.w	r2, #4294967295
 8004548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f103 0208 	add.w	r2, r3, #8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f103 0208 	add.w	r2, r3, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr

08004586 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004586:	b480      	push	{r7}
 8004588:	b085      	sub	sp, #20
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	601a      	str	r2, [r3, #0]
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d103      	bne.n	80045ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e00c      	b.n	8004606 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3308      	adds	r3, #8
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	e002      	b.n	80045fa <vListInsert+0x2e>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	d2f6      	bcs.n	80045f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	601a      	str	r2, [r3, #0]
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6892      	ldr	r2, [r2, #8]
 8004652:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6852      	ldr	r2, [r2, #4]
 800465c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d103      	bne.n	8004670 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	1e5a      	subs	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr
	...

08004690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3b04      	subs	r3, #4
 80046a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3b04      	subs	r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f023 0201 	bic.w	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3b04      	subs	r3, #4
 80046be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046c0:	4a08      	ldr	r2, [pc, #32]	; (80046e4 <pxPortInitialiseStack+0x54>)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3b14      	subs	r3, #20
 80046ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3b20      	subs	r3, #32
 80046d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046d8:	68fb      	ldr	r3, [r7, #12]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	080046e9 	.word	0x080046e9

080046e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <prvTaskExitError+0x54>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d00a      	beq.n	8004712 <prvTaskExitError+0x2a>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
}
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <prvTaskExitError+0x28>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	60bb      	str	r3, [r7, #8]
}
 8004724:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004726:	bf00      	nop
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0fc      	beq.n	8004728 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000038 	.word	0x20000038

08004740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004740:	4b07      	ldr	r3, [pc, #28]	; (8004760 <pxCurrentTCBConst2>)
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	6808      	ldr	r0, [r1, #0]
 8004746:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800474a:	f380 8809 	msr	PSP, r0
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f380 8811 	msr	BASEPRI, r0
 800475a:	f04e 0e0d 	orr.w	lr, lr, #13
 800475e:	4770      	bx	lr

08004760 <pxCurrentTCBConst2>:
 8004760:	20001334 	.word	0x20001334
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop

08004768 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004768:	4806      	ldr	r0, [pc, #24]	; (8004784 <prvPortStartFirstTask+0x1c>)
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	6800      	ldr	r0, [r0, #0]
 800476e:	f380 8808 	msr	MSP, r0
 8004772:	b662      	cpsie	i
 8004774:	b661      	cpsie	f
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	df00      	svc	0
 8004780:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004782:	bf00      	nop
 8004784:	e000ed08 	.word	0xe000ed08

08004788 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800478e:	4b32      	ldr	r3, [pc, #200]	; (8004858 <xPortStartScheduler+0xd0>)
 8004790:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	22ff      	movs	r2, #255	; 0xff
 800479e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	4b2a      	ldr	r3, [pc, #168]	; (800485c <xPortStartScheduler+0xd4>)
 80047b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047b6:	4b2a      	ldr	r3, [pc, #168]	; (8004860 <xPortStartScheduler+0xd8>)
 80047b8:	2207      	movs	r2, #7
 80047ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047bc:	e009      	b.n	80047d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80047be:	4b28      	ldr	r3, [pc, #160]	; (8004860 <xPortStartScheduler+0xd8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	4a26      	ldr	r2, [pc, #152]	; (8004860 <xPortStartScheduler+0xd8>)
 80047c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047da:	2b80      	cmp	r3, #128	; 0x80
 80047dc:	d0ef      	beq.n	80047be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <xPortStartScheduler+0xd8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1c3 0307 	rsb	r3, r3, #7
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d00a      	beq.n	8004800 <xPortStartScheduler+0x78>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	60bb      	str	r3, [r7, #8]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <xPortStartScheduler+0xd8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	4a16      	ldr	r2, [pc, #88]	; (8004860 <xPortStartScheduler+0xd8>)
 8004808:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800480a:	4b15      	ldr	r3, [pc, #84]	; (8004860 <xPortStartScheduler+0xd8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004812:	4a13      	ldr	r2, [pc, #76]	; (8004860 <xPortStartScheduler+0xd8>)
 8004814:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <xPortStartScheduler+0xdc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a10      	ldr	r2, [pc, #64]	; (8004864 <xPortStartScheduler+0xdc>)
 8004824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004828:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800482a:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <xPortStartScheduler+0xdc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a0d      	ldr	r2, [pc, #52]	; (8004864 <xPortStartScheduler+0xdc>)
 8004830:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004834:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004836:	f000 f8b9 	bl	80049ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <xPortStartScheduler+0xe0>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004840:	f7ff ff92 	bl	8004768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004844:	f001 f9a0 	bl	8005b88 <vTaskSwitchContext>
	prvTaskExitError();
 8004848:	f7ff ff4e 	bl	80046e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	e000e400 	.word	0xe000e400
 800485c:	2000132c 	.word	0x2000132c
 8004860:	20001330 	.word	0x20001330
 8004864:	e000ed20 	.word	0xe000ed20
 8004868:	20000038 	.word	0x20000038

0800486c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	607b      	str	r3, [r7, #4]
}
 8004884:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <vPortEnterCritical+0x58>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3301      	adds	r3, #1
 800488c:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <vPortEnterCritical+0x58>)
 800488e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004890:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <vPortEnterCritical+0x58>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d10f      	bne.n	80048b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <vPortEnterCritical+0x5c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	603b      	str	r3, [r7, #0]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <vPortEnterCritical+0x4a>
	}
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000038 	.word	0x20000038
 80048c8:	e000ed04 	.word	0xe000ed04

080048cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048d2:	4b11      	ldr	r3, [pc, #68]	; (8004918 <vPortExitCritical+0x4c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <vPortExitCritical+0x24>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	607b      	str	r3, [r7, #4]
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048f0:	4b09      	ldr	r3, [pc, #36]	; (8004918 <vPortExitCritical+0x4c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	4a08      	ldr	r2, [pc, #32]	; (8004918 <vPortExitCritical+0x4c>)
 80048f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048fa:	4b07      	ldr	r3, [pc, #28]	; (8004918 <vPortExitCritical+0x4c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d105      	bne.n	800490e <vPortExitCritical+0x42>
 8004902:	2300      	movs	r3, #0
 8004904:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800490c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	20000038 	.word	0x20000038
 800491c:	00000000 	.word	0x00000000

08004920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004920:	f3ef 8009 	mrs	r0, PSP
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <pxCurrentTCBConst>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004930:	6010      	str	r0, [r2, #0]
 8004932:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004936:	f04f 0050 	mov.w	r0, #80	; 0x50
 800493a:	f380 8811 	msr	BASEPRI, r0
 800493e:	f001 f923 	bl	8005b88 <vTaskSwitchContext>
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f380 8811 	msr	BASEPRI, r0
 800494a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	6808      	ldr	r0, [r1, #0]
 8004952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004956:	f380 8809 	msr	PSP, r0
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	4770      	bx	lr

08004960 <pxCurrentTCBConst>:
 8004960:	20001334 	.word	0x20001334
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop

08004968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	607b      	str	r3, [r7, #4]
}
 8004980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004982:	f001 f843 	bl	8005a0c <xTaskIncrementTick>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <SysTick_Handler+0x40>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	2300      	movs	r3, #0
 8004996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f383 8811 	msr	BASEPRI, r3
}
 800499e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <vPortSetupTimerInterrupt+0x30>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <vPortSetupTimerInterrupt+0x34>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <vPortSetupTimerInterrupt+0x38>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <vPortSetupTimerInterrupt+0x3c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	4a08      	ldr	r2, [pc, #32]	; (80049ec <vPortSetupTimerInterrupt+0x40>)
 80049ca:	3b01      	subs	r3, #1
 80049cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ce:	4b03      	ldr	r3, [pc, #12]	; (80049dc <vPortSetupTimerInterrupt+0x30>)
 80049d0:	2207      	movs	r2, #7
 80049d2:	601a      	str	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	e000e010 	.word	0xe000e010
 80049e0:	e000e018 	.word	0xe000e018
 80049e4:	2000002c 	.word	0x2000002c
 80049e8:	10624dd3 	.word	0x10624dd3
 80049ec:	e000e014 	.word	0xe000e014

080049f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049f6:	f3ef 8305 	mrs	r3, IPSR
 80049fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	d914      	bls.n	8004a2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a02:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <vPortValidateInterruptPriority+0x6c>)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a0c:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <vPortValidateInterruptPriority+0x70>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	7afa      	ldrb	r2, [r7, #11]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d20a      	bcs.n	8004a2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	607b      	str	r3, [r7, #4]
}
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <vPortValidateInterruptPriority+0x74>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <vPortValidateInterruptPriority+0x78>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d90a      	bls.n	8004a52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	603b      	str	r3, [r7, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <vPortValidateInterruptPriority+0x60>
	}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	e000e3f0 	.word	0xe000e3f0
 8004a60:	2000132c 	.word	0x2000132c
 8004a64:	e000ed0c 	.word	0xe000ed0c
 8004a68:	20001330 	.word	0x20001330

08004a6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <xQueueGenericReset+0x2a>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	60bb      	str	r3, [r7, #8]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a96:	f7ff fee9 	bl	800486c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	68f9      	ldr	r1, [r7, #12]
 8004aa4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	441a      	add	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	68f9      	ldr	r1, [r7, #12]
 8004aca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	441a      	add	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	22ff      	movs	r2, #255	; 0xff
 8004ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	22ff      	movs	r2, #255	; 0xff
 8004ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d114      	bne.n	8004b16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01a      	beq.n	8004b2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3310      	adds	r3, #16
 8004af8:	4618      	mov	r0, r3
 8004afa:	f001 f8f1 	bl	8005ce0 <xTaskRemoveFromEventList>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d012      	beq.n	8004b2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <xQueueGenericReset+0xcc>)
 8004b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	e009      	b.n	8004b2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3310      	adds	r3, #16
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fd08 	bl	8004530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3324      	adds	r3, #36	; 0x24
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff fd03 	bl	8004530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b2a:	f7ff fecf 	bl	80048cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b2e:	2301      	movs	r3, #1
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08e      	sub	sp, #56	; 0x38
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <xQueueGenericCreateStatic+0x52>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <xQueueGenericCreateStatic+0x56>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <xQueueGenericCreateStatic+0x58>
 8004b92:	2300      	movs	r3, #0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	623b      	str	r3, [r7, #32]
}
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <xQueueGenericCreateStatic+0x7e>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <xQueueGenericCreateStatic+0x82>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <xQueueGenericCreateStatic+0x84>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	61fb      	str	r3, [r7, #28]
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bda:	2350      	movs	r3, #80	; 0x50
 8004bdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b50      	cmp	r3, #80	; 0x50
 8004be2:	d00a      	beq.n	8004bfa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	61bb      	str	r3, [r7, #24]
}
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00d      	beq.n	8004c20 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c0c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f805 	bl	8004c2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3730      	adds	r7, #48	; 0x30
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e002      	b.n	8004c4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c58:	2101      	movs	r1, #1
 8004c5a:	69b8      	ldr	r0, [r7, #24]
 8004c5c:	f7ff ff06 	bl	8004a6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08e      	sub	sp, #56	; 0x38
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <xQueueGenericSend+0x32>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <xQueueGenericSend+0x40>
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <xQueueGenericSend+0x44>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <xQueueGenericSend+0x46>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <xQueueGenericSend+0x60>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ccc:	bf00      	nop
 8004cce:	e7fe      	b.n	8004cce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d103      	bne.n	8004cde <xQueueGenericSend+0x6e>
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <xQueueGenericSend+0x72>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <xQueueGenericSend+0x74>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <xQueueGenericSend+0x8e>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	623b      	str	r3, [r7, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cfe:	f001 f9b1 	bl	8006064 <xTaskGetSchedulerState>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <xQueueGenericSend+0x9e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <xQueueGenericSend+0xa2>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <xQueueGenericSend+0xa4>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xQueueGenericSend+0xbe>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	61fb      	str	r3, [r7, #28]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d2e:	f7ff fd9d 	bl	800486c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <xQueueGenericSend+0xd4>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d129      	bne.n	8004d98 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d4a:	f000 fa07 	bl	800515c <prvCopyDataToQueue>
 8004d4e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	3324      	adds	r3, #36	; 0x24
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 ffbf 	bl	8005ce0 <xTaskRemoveFromEventList>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d013      	beq.n	8004d90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d68:	4b3f      	ldr	r3, [pc, #252]	; (8004e68 <xQueueGenericSend+0x1f8>)
 8004d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	e00a      	b.n	8004d90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d80:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <xQueueGenericSend+0x1f8>)
 8004d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d90:	f7ff fd9c 	bl	80048cc <vPortExitCritical>
				return pdPASS;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e063      	b.n	8004e60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d9e:	f7ff fd95 	bl	80048cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e05c      	b.n	8004e60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dac:	f107 0314 	add.w	r3, r7, #20
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fff9 	bl	8005da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004db6:	2301      	movs	r3, #1
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dba:	f7ff fd87 	bl	80048cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dbe:	f000 fd6b 	bl	8005898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dc2:	f7ff fd53 	bl	800486c <vPortEnterCritical>
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dcc:	b25b      	sxtb	r3, r3
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d103      	bne.n	8004ddc <xQueueGenericSend+0x16c>
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004de2:	b25b      	sxtb	r3, r3
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d103      	bne.n	8004df2 <xQueueGenericSend+0x182>
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004df2:	f7ff fd6b 	bl	80048cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004df6:	1d3a      	adds	r2, r7, #4
 8004df8:	f107 0314 	add.w	r3, r7, #20
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 ffe8 	bl	8005dd4 <xTaskCheckForTimeOut>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d124      	bne.n	8004e54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e0c:	f000 fa9e 	bl	800534c <prvIsQueueFull>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d018      	beq.n	8004e48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	3310      	adds	r3, #16
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 ff0e 	bl	8005c40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e26:	f000 fa29 	bl	800527c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e2a:	f000 fd43 	bl	80058b4 <xTaskResumeAll>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f47f af7c 	bne.w	8004d2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e36:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <xQueueGenericSend+0x1f8>)
 8004e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	e772      	b.n	8004d2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4a:	f000 fa17 	bl	800527c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e4e:	f000 fd31 	bl	80058b4 <xTaskResumeAll>
 8004e52:	e76c      	b.n	8004d2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e56:	f000 fa11 	bl	800527c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e5a:	f000 fd2b 	bl	80058b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e5e:	2300      	movs	r3, #0
		}
	}
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3738      	adds	r7, #56	; 0x38
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08e      	sub	sp, #56	; 0x38
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <xQueueGenericSendFromISR+0x3c>
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <xQueueGenericSendFromISR+0x40>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <xQueueGenericSendFromISR+0x42>
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	623b      	str	r3, [r7, #32]
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d103      	bne.n	8004ed6 <xQueueGenericSendFromISR+0x6a>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <xQueueGenericSendFromISR+0x6e>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xQueueGenericSendFromISR+0x70>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	61fb      	str	r3, [r7, #28]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ef6:	f7ff fd7b 	bl	80049f0 <vPortValidateInterruptPriority>
	__asm volatile
 8004efa:	f3ef 8211 	mrs	r2, BASEPRI
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	61ba      	str	r2, [r7, #24]
 8004f10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004f12:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <xQueueGenericSendFromISR+0xbc>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d12c      	bne.n	8004f82 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f38:	f000 f910 	bl	800515c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d112      	bne.n	8004f6c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	3324      	adds	r3, #36	; 0x24
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fec4 	bl	8005ce0 <xTaskRemoveFromEventList>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00e      	beq.n	8004f7c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	e007      	b.n	8004f7c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f70:	3301      	adds	r3, #1
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	b25a      	sxtb	r2, r3
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004f80:	e001      	b.n	8004f86 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	637b      	str	r3, [r7, #52]	; 0x34
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f383 8811 	msr	BASEPRI, r3
}
 8004f90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3738      	adds	r7, #56	; 0x38
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08c      	sub	sp, #48	; 0x30
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10a      	bne.n	8004fcc <xQueueReceive+0x30>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	623b      	str	r3, [r7, #32]
}
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <xQueueReceive+0x3e>
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <xQueueReceive+0x42>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <xQueueReceive+0x44>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <xQueueReceive+0x5e>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	61fb      	str	r3, [r7, #28]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ffa:	f001 f833 	bl	8006064 <xTaskGetSchedulerState>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <xQueueReceive+0x6e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <xQueueReceive+0x72>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <xQueueReceive+0x74>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <xQueueReceive+0x8e>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	61bb      	str	r3, [r7, #24]
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800502a:	f7ff fc1f 	bl	800486c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01f      	beq.n	800507a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800503e:	f000 f8f7 	bl	8005230 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	1e5a      	subs	r2, r3, #1
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00f      	beq.n	8005072 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	3310      	adds	r3, #16
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fe42 	bl	8005ce0 <xTaskRemoveFromEventList>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005062:	4b3d      	ldr	r3, [pc, #244]	; (8005158 <xQueueReceive+0x1bc>)
 8005064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005072:	f7ff fc2b 	bl	80048cc <vPortExitCritical>
				return pdPASS;
 8005076:	2301      	movs	r3, #1
 8005078:	e069      	b.n	800514e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d103      	bne.n	8005088 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005080:	f7ff fc24 	bl	80048cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005084:	2300      	movs	r3, #0
 8005086:	e062      	b.n	800514e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800508e:	f107 0310 	add.w	r3, r7, #16
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fe88 	bl	8005da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800509c:	f7ff fc16 	bl	80048cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050a0:	f000 fbfa 	bl	8005898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050a4:	f7ff fbe2 	bl	800486c <vPortEnterCritical>
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ae:	b25b      	sxtb	r3, r3
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d103      	bne.n	80050be <xQueueReceive+0x122>
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c4:	b25b      	sxtb	r3, r3
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d103      	bne.n	80050d4 <xQueueReceive+0x138>
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d4:	f7ff fbfa 	bl	80048cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050d8:	1d3a      	adds	r2, r7, #4
 80050da:	f107 0310 	add.w	r3, r7, #16
 80050de:	4611      	mov	r1, r2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fe77 	bl	8005dd4 <xTaskCheckForTimeOut>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d123      	bne.n	8005134 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ee:	f000 f917 	bl	8005320 <prvIsQueueEmpty>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d017      	beq.n	8005128 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	3324      	adds	r3, #36	; 0x24
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fd9d 	bl	8005c40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005108:	f000 f8b8 	bl	800527c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800510c:	f000 fbd2 	bl	80058b4 <xTaskResumeAll>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d189      	bne.n	800502a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <xQueueReceive+0x1bc>)
 8005118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	e780      	b.n	800502a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800512a:	f000 f8a7 	bl	800527c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800512e:	f000 fbc1 	bl	80058b4 <xTaskResumeAll>
 8005132:	e77a      	b.n	800502a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005136:	f000 f8a1 	bl	800527c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800513a:	f000 fbbb 	bl	80058b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800513e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005140:	f000 f8ee 	bl	8005320 <prvIsQueueEmpty>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	f43f af6f 	beq.w	800502a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800514c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800514e:	4618      	mov	r0, r3
 8005150:	3730      	adds	r7, #48	; 0x30
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	e000ed04 	.word	0xe000ed04

0800515c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10d      	bne.n	8005196 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d14d      	bne.n	800521e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4618      	mov	r0, r3
 8005188:	f000 ff8a 	bl	80060a0 <xTaskPriorityDisinherit>
 800518c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	605a      	str	r2, [r3, #4]
 8005194:	e043      	b.n	800521e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d119      	bne.n	80051d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6898      	ldr	r0, [r3, #8]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	461a      	mov	r2, r3
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	f001 fb72 	bl	8006890 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	441a      	add	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d32b      	bcc.n	800521e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	609a      	str	r2, [r3, #8]
 80051ce:	e026      	b.n	800521e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68d8      	ldr	r0, [r3, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	461a      	mov	r2, r3
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	f001 fb58 	bl	8006890 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	425b      	negs	r3, r3
 80051ea:	441a      	add	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d207      	bcs.n	800520c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	425b      	negs	r3, r3
 8005206:	441a      	add	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d105      	bne.n	800521e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	3b01      	subs	r3, #1
 800521c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005226:	697b      	ldr	r3, [r7, #20]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d018      	beq.n	8005274 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	441a      	add	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	429a      	cmp	r2, r3
 800525a:	d303      	bcc.n	8005264 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68d9      	ldr	r1, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	461a      	mov	r2, r3
 800526e:	6838      	ldr	r0, [r7, #0]
 8005270:	f001 fb0e 	bl	8006890 <memcpy>
	}
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005284:	f7ff faf2 	bl	800486c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800528e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005290:	e011      	b.n	80052b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d012      	beq.n	80052c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3324      	adds	r3, #36	; 0x24
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fd1e 	bl	8005ce0 <xTaskRemoveFromEventList>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052aa:	f000 fdf5 	bl	8005e98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	dce9      	bgt.n	8005292 <prvUnlockQueue+0x16>
 80052be:	e000      	b.n	80052c2 <prvUnlockQueue+0x46>
					break;
 80052c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	22ff      	movs	r2, #255	; 0xff
 80052c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052ca:	f7ff faff 	bl	80048cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052ce:	f7ff facd 	bl	800486c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052da:	e011      	b.n	8005300 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d012      	beq.n	800530a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3310      	adds	r3, #16
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fcf9 	bl	8005ce0 <xTaskRemoveFromEventList>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052f4:	f000 fdd0 	bl	8005e98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005304:	2b00      	cmp	r3, #0
 8005306:	dce9      	bgt.n	80052dc <prvUnlockQueue+0x60>
 8005308:	e000      	b.n	800530c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800530a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	22ff      	movs	r2, #255	; 0xff
 8005310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005314:	f7ff fada 	bl	80048cc <vPortExitCritical>
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005328:	f7ff faa0 	bl	800486c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005334:	2301      	movs	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e001      	b.n	800533e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800533e:	f7ff fac5 	bl	80048cc <vPortExitCritical>

	return xReturn;
 8005342:	68fb      	ldr	r3, [r7, #12]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005354:	f7ff fa8a 	bl	800486c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005360:	429a      	cmp	r2, r3
 8005362:	d102      	bne.n	800536a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005364:	2301      	movs	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e001      	b.n	800536e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800536e:	f7ff faad 	bl	80048cc <vPortExitCritical>

	return xReturn;
 8005372:	68fb      	ldr	r3, [r7, #12]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	e014      	b.n	80053b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800538c:	4a0e      	ldr	r2, [pc, #56]	; (80053c8 <vQueueAddToRegistry+0x4c>)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10b      	bne.n	80053b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005398:	490b      	ldr	r1, [pc, #44]	; (80053c8 <vQueueAddToRegistry+0x4c>)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053a2:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <vQueueAddToRegistry+0x4c>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053ae:	e006      	b.n	80053be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3301      	adds	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b07      	cmp	r3, #7
 80053ba:	d9e7      	bls.n	800538c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr
 80053c8:	20001be8 	.word	0x20001be8

080053cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053dc:	f7ff fa46 	bl	800486c <vPortEnterCritical>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053e6:	b25b      	sxtb	r3, r3
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d103      	bne.n	80053f6 <vQueueWaitForMessageRestricted+0x2a>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d103      	bne.n	800540c <vQueueWaitForMessageRestricted+0x40>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800540c:	f7ff fa5e 	bl	80048cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d106      	bne.n	8005426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	3324      	adds	r3, #36	; 0x24
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fc31 	bl	8005c88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005426:	6978      	ldr	r0, [r7, #20]
 8005428:	f7ff ff28 	bl	800527c <prvUnlockQueue>
	}
 800542c:	bf00      	nop
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08e      	sub	sp, #56	; 0x38
 8005438:	af04      	add	r7, sp, #16
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	623b      	str	r3, [r7, #32]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <xTaskCreateStatic+0x46>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	61fb      	str	r3, [r7, #28]
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800547a:	235c      	movs	r3, #92	; 0x5c
 800547c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b5c      	cmp	r3, #92	; 0x5c
 8005482:	d00a      	beq.n	800549a <xTaskCreateStatic+0x66>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	61bb      	str	r3, [r7, #24]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01e      	beq.n	80054de <xTaskCreateStatic+0xaa>
 80054a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01b      	beq.n	80054de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054b8:	2300      	movs	r3, #0
 80054ba:	9303      	str	r3, [sp, #12]
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	9302      	str	r3, [sp, #8]
 80054c0:	f107 0314 	add.w	r3, r7, #20
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f850 	bl	8005576 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054d8:	f000 f8d4 	bl	8005684 <prvAddNewTaskToReadyList>
 80054dc:	e001      	b.n	80054e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054e2:	697b      	ldr	r3, [r7, #20]
	}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3728      	adds	r7, #40	; 0x28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08c      	sub	sp, #48	; 0x30
 80054f0:	af04      	add	r7, sp, #16
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054fc:	88fb      	ldrh	r3, [r7, #6]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe fe3d 	bl	8004180 <pvPortMalloc>
 8005506:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00e      	beq.n	800552c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800550e:	205c      	movs	r0, #92	; 0x5c
 8005510:	f7fe fe36 	bl	8004180 <pvPortMalloc>
 8005514:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
 8005522:	e005      	b.n	8005530 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005524:	6978      	ldr	r0, [r7, #20]
 8005526:	f7fe feef 	bl	8004308 <vPortFree>
 800552a:	e001      	b.n	8005530 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d017      	beq.n	8005566 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	2300      	movs	r3, #0
 8005542:	9303      	str	r3, [sp, #12]
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	9302      	str	r3, [sp, #8]
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68b9      	ldr	r1, [r7, #8]
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 f80e 	bl	8005576 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800555a:	69f8      	ldr	r0, [r7, #28]
 800555c:	f000 f892 	bl	8005684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005560:	2301      	movs	r3, #1
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	e002      	b.n	800556c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005566:	f04f 33ff 	mov.w	r3, #4294967295
 800556a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800556c:	69bb      	ldr	r3, [r7, #24]
	}
 800556e:	4618      	mov	r0, r3
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b088      	sub	sp, #32
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
 8005582:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	461a      	mov	r2, r3
 800558e:	21a5      	movs	r1, #165	; 0xa5
 8005590:	f001 f98c 	bl	80068ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800559e:	3b01      	subs	r3, #1
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f023 0307 	bic.w	r3, r3, #7
 80055ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <prvInitialiseNewTask+0x58>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	617b      	str	r3, [r7, #20]
}
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ce:	2300      	movs	r3, #0
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	e012      	b.n	80055fa <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	7819      	ldrb	r1, [r3, #0]
 80055dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	3334      	adds	r3, #52	; 0x34
 80055e4:	460a      	mov	r2, r1
 80055e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d006      	beq.n	8005602 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	3301      	adds	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b0f      	cmp	r3, #15
 80055fe:	d9e9      	bls.n	80055d4 <prvInitialiseNewTask+0x5e>
 8005600:	e000      	b.n	8005604 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005602:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	2b37      	cmp	r3, #55	; 0x37
 8005610:	d901      	bls.n	8005616 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005612:	2337      	movs	r3, #55	; 0x37
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800561a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005620:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	2200      	movs	r2, #0
 8005626:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	3304      	adds	r3, #4
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe ff9e 	bl	800456e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	3318      	adds	r3, #24
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe ff99 	bl	800456e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005640:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005650:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	2200      	movs	r2, #0
 8005656:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	68f9      	ldr	r1, [r7, #12]
 8005664:	69b8      	ldr	r0, [r7, #24]
 8005666:	f7ff f813 	bl	8004690 <pxPortInitialiseStack>
 800566a:	4602      	mov	r2, r0
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800567c:	bf00      	nop
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800568c:	f7ff f8ee 	bl	800486c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005690:	4b2d      	ldr	r3, [pc, #180]	; (8005748 <prvAddNewTaskToReadyList+0xc4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3301      	adds	r3, #1
 8005696:	4a2c      	ldr	r2, [pc, #176]	; (8005748 <prvAddNewTaskToReadyList+0xc4>)
 8005698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800569a:	4b2c      	ldr	r3, [pc, #176]	; (800574c <prvAddNewTaskToReadyList+0xc8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056a2:	4a2a      	ldr	r2, [pc, #168]	; (800574c <prvAddNewTaskToReadyList+0xc8>)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056a8:	4b27      	ldr	r3, [pc, #156]	; (8005748 <prvAddNewTaskToReadyList+0xc4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d110      	bne.n	80056d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056b0:	f000 fc16 	bl	8005ee0 <prvInitialiseTaskLists>
 80056b4:	e00d      	b.n	80056d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056b6:	4b26      	ldr	r3, [pc, #152]	; (8005750 <prvAddNewTaskToReadyList+0xcc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d109      	bne.n	80056d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056be:	4b23      	ldr	r3, [pc, #140]	; (800574c <prvAddNewTaskToReadyList+0xc8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d802      	bhi.n	80056d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056cc:	4a1f      	ldr	r2, [pc, #124]	; (800574c <prvAddNewTaskToReadyList+0xc8>)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056d2:	4b20      	ldr	r3, [pc, #128]	; (8005754 <prvAddNewTaskToReadyList+0xd0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3301      	adds	r3, #1
 80056d8:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <prvAddNewTaskToReadyList+0xd0>)
 80056da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056dc:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <prvAddNewTaskToReadyList+0xd0>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e8:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <prvAddNewTaskToReadyList+0xd4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d903      	bls.n	80056f8 <prvAddNewTaskToReadyList+0x74>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	4a18      	ldr	r2, [pc, #96]	; (8005758 <prvAddNewTaskToReadyList+0xd4>)
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4a15      	ldr	r2, [pc, #84]	; (800575c <prvAddNewTaskToReadyList+0xd8>)
 8005706:	441a      	add	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f7fe ff39 	bl	8004586 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005714:	f7ff f8da 	bl	80048cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005718:	4b0d      	ldr	r3, [pc, #52]	; (8005750 <prvAddNewTaskToReadyList+0xcc>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00e      	beq.n	800573e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <prvAddNewTaskToReadyList+0xc8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	429a      	cmp	r2, r3
 800572c:	d207      	bcs.n	800573e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <prvAddNewTaskToReadyList+0xdc>)
 8005730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800573e:	bf00      	nop
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20001808 	.word	0x20001808
 800574c:	20001334 	.word	0x20001334
 8005750:	20001814 	.word	0x20001814
 8005754:	20001824 	.word	0x20001824
 8005758:	20001810 	.word	0x20001810
 800575c:	20001338 	.word	0x20001338
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d017      	beq.n	80057a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005776:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <vTaskDelay+0x60>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <vTaskDelay+0x30>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60bb      	str	r3, [r7, #8]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005794:	f000 f880 	bl	8005898 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005798:	2100      	movs	r1, #0
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fcee 	bl	800617c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057a0:	f000 f888 	bl	80058b4 <xTaskResumeAll>
 80057a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d107      	bne.n	80057bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <vTaskDelay+0x64>)
 80057ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20001830 	.word	0x20001830
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08a      	sub	sp, #40	; 0x28
 80057d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057da:	463a      	mov	r2, r7
 80057dc:	1d39      	adds	r1, r7, #4
 80057de:	f107 0308 	add.w	r3, r7, #8
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe fc9a 	bl	800411c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	9202      	str	r2, [sp, #8]
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	2300      	movs	r3, #0
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	2300      	movs	r3, #0
 80057f8:	460a      	mov	r2, r1
 80057fa:	4921      	ldr	r1, [pc, #132]	; (8005880 <vTaskStartScheduler+0xb4>)
 80057fc:	4821      	ldr	r0, [pc, #132]	; (8005884 <vTaskStartScheduler+0xb8>)
 80057fe:	f7ff fe19 	bl	8005434 <xTaskCreateStatic>
 8005802:	4603      	mov	r3, r0
 8005804:	4a20      	ldr	r2, [pc, #128]	; (8005888 <vTaskStartScheduler+0xbc>)
 8005806:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005808:	4b1f      	ldr	r3, [pc, #124]	; (8005888 <vTaskStartScheduler+0xbc>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005810:	2301      	movs	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e001      	b.n	800581a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d102      	bne.n	8005826 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005820:	f000 fd00 	bl	8006224 <xTimerCreateTimerTask>
 8005824:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d116      	bne.n	800585a <vTaskStartScheduler+0x8e>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	613b      	str	r3, [r7, #16]
}
 800583e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005840:	4b12      	ldr	r3, [pc, #72]	; (800588c <vTaskStartScheduler+0xc0>)
 8005842:	f04f 32ff 	mov.w	r2, #4294967295
 8005846:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005848:	4b11      	ldr	r3, [pc, #68]	; (8005890 <vTaskStartScheduler+0xc4>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800584e:	4b11      	ldr	r3, [pc, #68]	; (8005894 <vTaskStartScheduler+0xc8>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005854:	f7fe ff98 	bl	8004788 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005858:	e00e      	b.n	8005878 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005860:	d10a      	bne.n	8005878 <vTaskStartScheduler+0xac>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	60fb      	str	r3, [r7, #12]
}
 8005874:	bf00      	nop
 8005876:	e7fe      	b.n	8005876 <vTaskStartScheduler+0xaa>
}
 8005878:	bf00      	nop
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	08006918 	.word	0x08006918
 8005884:	08005eb1 	.word	0x08005eb1
 8005888:	2000182c 	.word	0x2000182c
 800588c:	20001828 	.word	0x20001828
 8005890:	20001814 	.word	0x20001814
 8005894:	2000180c 	.word	0x2000180c

08005898 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <vTaskSuspendAll+0x18>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	4a03      	ldr	r2, [pc, #12]	; (80058b0 <vTaskSuspendAll+0x18>)
 80058a4:	6013      	str	r3, [r2, #0]
}
 80058a6:	bf00      	nop
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20001830 	.word	0x20001830

080058b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058c2:	4b42      	ldr	r3, [pc, #264]	; (80059cc <xTaskResumeAll+0x118>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10a      	bne.n	80058e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	603b      	str	r3, [r7, #0]
}
 80058dc:	bf00      	nop
 80058de:	e7fe      	b.n	80058de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058e0:	f7fe ffc4 	bl	800486c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058e4:	4b39      	ldr	r3, [pc, #228]	; (80059cc <xTaskResumeAll+0x118>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	4a38      	ldr	r2, [pc, #224]	; (80059cc <xTaskResumeAll+0x118>)
 80058ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ee:	4b37      	ldr	r3, [pc, #220]	; (80059cc <xTaskResumeAll+0x118>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d162      	bne.n	80059bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058f6:	4b36      	ldr	r3, [pc, #216]	; (80059d0 <xTaskResumeAll+0x11c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d05e      	beq.n	80059bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058fe:	e02f      	b.n	8005960 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005900:	4b34      	ldr	r3, [pc, #208]	; (80059d4 <xTaskResumeAll+0x120>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3318      	adds	r3, #24
 800590c:	4618      	mov	r0, r3
 800590e:	f7fe fe95 	bl	800463c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3304      	adds	r3, #4
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe fe90 	bl	800463c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	4b2d      	ldr	r3, [pc, #180]	; (80059d8 <xTaskResumeAll+0x124>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d903      	bls.n	8005930 <xTaskResumeAll+0x7c>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	4a2a      	ldr	r2, [pc, #168]	; (80059d8 <xTaskResumeAll+0x124>)
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4a27      	ldr	r2, [pc, #156]	; (80059dc <xTaskResumeAll+0x128>)
 800593e:	441a      	add	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f7fe fe1d 	bl	8004586 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	4b23      	ldr	r3, [pc, #140]	; (80059e0 <xTaskResumeAll+0x12c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	429a      	cmp	r2, r3
 8005958:	d302      	bcc.n	8005960 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800595a:	4b22      	ldr	r3, [pc, #136]	; (80059e4 <xTaskResumeAll+0x130>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005960:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <xTaskResumeAll+0x120>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1cb      	bne.n	8005900 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800596e:	f000 fb55 	bl	800601c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005972:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <xTaskResumeAll+0x134>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d010      	beq.n	80059a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800597e:	f000 f845 	bl	8005a0c <xTaskIncrementTick>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005988:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <xTaskResumeAll+0x130>)
 800598a:	2201      	movs	r2, #1
 800598c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3b01      	subs	r3, #1
 8005992:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f1      	bne.n	800597e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800599a:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <xTaskResumeAll+0x134>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059a0:	4b10      	ldr	r3, [pc, #64]	; (80059e4 <xTaskResumeAll+0x130>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d009      	beq.n	80059bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <xTaskResumeAll+0x138>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059bc:	f7fe ff86 	bl	80048cc <vPortExitCritical>

	return xAlreadyYielded;
 80059c0:	68bb      	ldr	r3, [r7, #8]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20001830 	.word	0x20001830
 80059d0:	20001808 	.word	0x20001808
 80059d4:	200017c8 	.word	0x200017c8
 80059d8:	20001810 	.word	0x20001810
 80059dc:	20001338 	.word	0x20001338
 80059e0:	20001334 	.word	0x20001334
 80059e4:	2000181c 	.word	0x2000181c
 80059e8:	20001818 	.word	0x20001818
 80059ec:	e000ed04 	.word	0xe000ed04

080059f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059f6:	4b04      	ldr	r3, [pc, #16]	; (8005a08 <xTaskGetTickCount+0x18>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059fc:	687b      	ldr	r3, [r7, #4]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr
 8005a08:	2000180c 	.word	0x2000180c

08005a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a16:	4b51      	ldr	r3, [pc, #324]	; (8005b5c <xTaskIncrementTick+0x150>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f040 808e 	bne.w	8005b3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a20:	4b4f      	ldr	r3, [pc, #316]	; (8005b60 <xTaskIncrementTick+0x154>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3301      	adds	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a28:	4a4d      	ldr	r2, [pc, #308]	; (8005b60 <xTaskIncrementTick+0x154>)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d120      	bne.n	8005a76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a34:	4b4b      	ldr	r3, [pc, #300]	; (8005b64 <xTaskIncrementTick+0x158>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	603b      	str	r3, [r7, #0]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <xTaskIncrementTick+0x46>
 8005a54:	4b43      	ldr	r3, [pc, #268]	; (8005b64 <xTaskIncrementTick+0x158>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	4b43      	ldr	r3, [pc, #268]	; (8005b68 <xTaskIncrementTick+0x15c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a41      	ldr	r2, [pc, #260]	; (8005b64 <xTaskIncrementTick+0x158>)
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4a41      	ldr	r2, [pc, #260]	; (8005b68 <xTaskIncrementTick+0x15c>)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	4b40      	ldr	r3, [pc, #256]	; (8005b6c <xTaskIncrementTick+0x160>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	4a3f      	ldr	r2, [pc, #252]	; (8005b6c <xTaskIncrementTick+0x160>)
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	f000 fad3 	bl	800601c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a76:	4b3e      	ldr	r3, [pc, #248]	; (8005b70 <xTaskIncrementTick+0x164>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d34e      	bcc.n	8005b1e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a80:	4b38      	ldr	r3, [pc, #224]	; (8005b64 <xTaskIncrementTick+0x158>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <xTaskIncrementTick+0x82>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <xTaskIncrementTick+0x84>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d004      	beq.n	8005a9e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a94:	4b36      	ldr	r3, [pc, #216]	; (8005b70 <xTaskIncrementTick+0x164>)
 8005a96:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9a:	601a      	str	r2, [r3, #0]
					break;
 8005a9c:	e03f      	b.n	8005b1e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a9e:	4b31      	ldr	r3, [pc, #196]	; (8005b64 <xTaskIncrementTick+0x158>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d203      	bcs.n	8005abe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ab6:	4a2e      	ldr	r2, [pc, #184]	; (8005b70 <xTaskIncrementTick+0x164>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6013      	str	r3, [r2, #0]
						break;
 8005abc:	e02f      	b.n	8005b1e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fdba 	bl	800463c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	3318      	adds	r3, #24
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe fdb1 	bl	800463c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ade:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <xTaskIncrementTick+0x168>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d903      	bls.n	8005aee <xTaskIncrementTick+0xe2>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	4a22      	ldr	r2, [pc, #136]	; (8005b74 <xTaskIncrementTick+0x168>)
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <xTaskIncrementTick+0x16c>)
 8005afc:	441a      	add	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f7fe fd3e 	bl	8004586 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0e:	4b1b      	ldr	r3, [pc, #108]	; (8005b7c <xTaskIncrementTick+0x170>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d3b3      	bcc.n	8005a80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b1c:	e7b0      	b.n	8005a80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b1e:	4b17      	ldr	r3, [pc, #92]	; (8005b7c <xTaskIncrementTick+0x170>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	4914      	ldr	r1, [pc, #80]	; (8005b78 <xTaskIncrementTick+0x16c>)
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d907      	bls.n	8005b46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005b36:	2301      	movs	r3, #1
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e004      	b.n	8005b46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b3c:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <xTaskIncrementTick+0x174>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3301      	adds	r3, #1
 8005b42:	4a0f      	ldr	r2, [pc, #60]	; (8005b80 <xTaskIncrementTick+0x174>)
 8005b44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005b46:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <xTaskIncrementTick+0x178>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b52:	697b      	ldr	r3, [r7, #20]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20001830 	.word	0x20001830
 8005b60:	2000180c 	.word	0x2000180c
 8005b64:	200017c0 	.word	0x200017c0
 8005b68:	200017c4 	.word	0x200017c4
 8005b6c:	20001820 	.word	0x20001820
 8005b70:	20001828 	.word	0x20001828
 8005b74:	20001810 	.word	0x20001810
 8005b78:	20001338 	.word	0x20001338
 8005b7c:	20001334 	.word	0x20001334
 8005b80:	20001818 	.word	0x20001818
 8005b84:	2000181c 	.word	0x2000181c

08005b88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b8e:	4b27      	ldr	r3, [pc, #156]	; (8005c2c <vTaskSwitchContext+0xa4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b96:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <vTaskSwitchContext+0xa8>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b9c:	e041      	b.n	8005c22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005b9e:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <vTaskSwitchContext+0xa8>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005ba4:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <vTaskSwitchContext+0xac>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	e010      	b.n	8005bce <vTaskSwitchContext+0x46>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	607b      	str	r3, [r7, #4]
}
 8005bc4:	bf00      	nop
 8005bc6:	e7fe      	b.n	8005bc6 <vTaskSwitchContext+0x3e>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	491a      	ldr	r1, [pc, #104]	; (8005c38 <vTaskSwitchContext+0xb0>)
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0e4      	beq.n	8005bac <vTaskSwitchContext+0x24>
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4613      	mov	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4a12      	ldr	r2, [pc, #72]	; (8005c38 <vTaskSwitchContext+0xb0>)
 8005bee:	4413      	add	r3, r2
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	3308      	adds	r3, #8
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d104      	bne.n	8005c12 <vTaskSwitchContext+0x8a>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4a08      	ldr	r2, [pc, #32]	; (8005c3c <vTaskSwitchContext+0xb4>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	4a05      	ldr	r2, [pc, #20]	; (8005c34 <vTaskSwitchContext+0xac>)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6013      	str	r3, [r2, #0]
}
 8005c22:	bf00      	nop
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr
 8005c2c:	20001830 	.word	0x20001830
 8005c30:	2000181c 	.word	0x2000181c
 8005c34:	20001810 	.word	0x20001810
 8005c38:	20001338 	.word	0x20001338
 8005c3c:	20001334 	.word	0x20001334

08005c40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	60fb      	str	r3, [r7, #12]
}
 8005c62:	bf00      	nop
 8005c64:	e7fe      	b.n	8005c64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c66:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <vTaskPlaceOnEventList+0x44>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3318      	adds	r3, #24
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fe fcac 	bl	80045cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c74:	2101      	movs	r1, #1
 8005c76:	6838      	ldr	r0, [r7, #0]
 8005c78:	f000 fa80 	bl	800617c <prvAddCurrentTaskToDelayedList>
}
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20001334 	.word	0x20001334

08005c88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	617b      	str	r3, [r7, #20]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cb0:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <vTaskPlaceOnEventListRestricted+0x54>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3318      	adds	r3, #24
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7fe fc64 	bl	8004586 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	68b8      	ldr	r0, [r7, #8]
 8005cce:	f000 fa55 	bl	800617c <prvAddCurrentTaskToDelayedList>
	}
 8005cd2:	bf00      	nop
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20001334 	.word	0x20001334

08005ce0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	60fb      	str	r3, [r7, #12]
}
 8005d08:	bf00      	nop
 8005d0a:	e7fe      	b.n	8005d0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	3318      	adds	r3, #24
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe fc93 	bl	800463c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d16:	4b1e      	ldr	r3, [pc, #120]	; (8005d90 <xTaskRemoveFromEventList+0xb0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d11d      	bne.n	8005d5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fc8a 	bl	800463c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2c:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <xTaskRemoveFromEventList+0xb4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d903      	bls.n	8005d3c <xTaskRemoveFromEventList+0x5c>
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4a16      	ldr	r2, [pc, #88]	; (8005d94 <xTaskRemoveFromEventList+0xb4>)
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <xTaskRemoveFromEventList+0xb8>)
 8005d4a:	441a      	add	r2, r3
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f7fe fc17 	bl	8004586 <vListInsertEnd>
 8005d58:	e005      	b.n	8005d66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	4619      	mov	r1, r3
 8005d60:	480e      	ldr	r0, [pc, #56]	; (8005d9c <xTaskRemoveFromEventList+0xbc>)
 8005d62:	f7fe fc10 	bl	8004586 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <xTaskRemoveFromEventList+0xc0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d905      	bls.n	8005d80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d74:	2301      	movs	r3, #1
 8005d76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <xTaskRemoveFromEventList+0xc4>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e001      	b.n	8005d84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005d84:	697b      	ldr	r3, [r7, #20]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20001830 	.word	0x20001830
 8005d94:	20001810 	.word	0x20001810
 8005d98:	20001338 	.word	0x20001338
 8005d9c:	200017c8 	.word	0x200017c8
 8005da0:	20001334 	.word	0x20001334
 8005da4:	2000181c 	.word	0x2000181c

08005da8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005db0:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <vTaskInternalSetTimeOutState+0x24>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <vTaskInternalSetTimeOutState+0x28>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	605a      	str	r2, [r3, #4]
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20001820 	.word	0x20001820
 8005dd0:	2000180c 	.word	0x2000180c

08005dd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	613b      	str	r3, [r7, #16]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60fb      	str	r3, [r7, #12]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005e16:	f7fe fd29 	bl	800486c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <xTaskCheckForTimeOut+0xbc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d102      	bne.n	8005e3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61fb      	str	r3, [r7, #28]
 8005e38:	e023      	b.n	8005e82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <xTaskCheckForTimeOut+0xc0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d007      	beq.n	8005e56 <xTaskCheckForTimeOut+0x82>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d302      	bcc.n	8005e56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	e015      	b.n	8005e82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d20b      	bcs.n	8005e78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1ad2      	subs	r2, r2, r3
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ff9b 	bl	8005da8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	e004      	b.n	8005e82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e82:	f7fe fd23 	bl	80048cc <vPortExitCritical>

	return xReturn;
 8005e86:	69fb      	ldr	r3, [r7, #28]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	2000180c 	.word	0x2000180c
 8005e94:	20001820 	.word	0x20001820

08005e98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e9c:	4b03      	ldr	r3, [pc, #12]	; (8005eac <vTaskMissedYield+0x14>)
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
}
 8005ea2:	bf00      	nop
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	2000181c 	.word	0x2000181c

08005eb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005eb8:	f000 f852 	bl	8005f60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <prvIdleTask+0x28>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d9f9      	bls.n	8005eb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <prvIdleTask+0x2c>)
 8005ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ed4:	e7f0      	b.n	8005eb8 <prvIdleTask+0x8>
 8005ed6:	bf00      	nop
 8005ed8:	20001338 	.word	0x20001338
 8005edc:	e000ed04 	.word	0xe000ed04

08005ee0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	607b      	str	r3, [r7, #4]
 8005eea:	e00c      	b.n	8005f06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4a12      	ldr	r2, [pc, #72]	; (8005f40 <prvInitialiseTaskLists+0x60>)
 8005ef8:	4413      	add	r3, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fe fb18 	bl	8004530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3301      	adds	r3, #1
 8005f04:	607b      	str	r3, [r7, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b37      	cmp	r3, #55	; 0x37
 8005f0a:	d9ef      	bls.n	8005eec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f0c:	480d      	ldr	r0, [pc, #52]	; (8005f44 <prvInitialiseTaskLists+0x64>)
 8005f0e:	f7fe fb0f 	bl	8004530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f12:	480d      	ldr	r0, [pc, #52]	; (8005f48 <prvInitialiseTaskLists+0x68>)
 8005f14:	f7fe fb0c 	bl	8004530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f18:	480c      	ldr	r0, [pc, #48]	; (8005f4c <prvInitialiseTaskLists+0x6c>)
 8005f1a:	f7fe fb09 	bl	8004530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f1e:	480c      	ldr	r0, [pc, #48]	; (8005f50 <prvInitialiseTaskLists+0x70>)
 8005f20:	f7fe fb06 	bl	8004530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f24:	480b      	ldr	r0, [pc, #44]	; (8005f54 <prvInitialiseTaskLists+0x74>)
 8005f26:	f7fe fb03 	bl	8004530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f2a:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <prvInitialiseTaskLists+0x78>)
 8005f2c:	4a05      	ldr	r2, [pc, #20]	; (8005f44 <prvInitialiseTaskLists+0x64>)
 8005f2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f30:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <prvInitialiseTaskLists+0x7c>)
 8005f32:	4a05      	ldr	r2, [pc, #20]	; (8005f48 <prvInitialiseTaskLists+0x68>)
 8005f34:	601a      	str	r2, [r3, #0]
}
 8005f36:	bf00      	nop
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20001338 	.word	0x20001338
 8005f44:	20001798 	.word	0x20001798
 8005f48:	200017ac 	.word	0x200017ac
 8005f4c:	200017c8 	.word	0x200017c8
 8005f50:	200017dc 	.word	0x200017dc
 8005f54:	200017f4 	.word	0x200017f4
 8005f58:	200017c0 	.word	0x200017c0
 8005f5c:	200017c4 	.word	0x200017c4

08005f60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f66:	e019      	b.n	8005f9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f68:	f7fe fc80 	bl	800486c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005f6c:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <prvCheckTasksWaitingTermination+0x50>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3304      	adds	r3, #4
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fe fb5f 	bl	800463c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <prvCheckTasksWaitingTermination+0x54>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	4a0b      	ldr	r2, [pc, #44]	; (8005fb4 <prvCheckTasksWaitingTermination+0x54>)
 8005f86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f88:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <prvCheckTasksWaitingTermination+0x58>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <prvCheckTasksWaitingTermination+0x58>)
 8005f90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f92:	f7fe fc9b 	bl	80048cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f810 	bl	8005fbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <prvCheckTasksWaitingTermination+0x58>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e1      	bne.n	8005f68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	200017dc 	.word	0x200017dc
 8005fb4:	20001808 	.word	0x20001808
 8005fb8:	200017f0 	.word	0x200017f0

08005fbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d108      	bne.n	8005fe0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe f998 	bl	8004308 <vPortFree>
				vPortFree( pxTCB );
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fe f995 	bl	8004308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fde:	e018      	b.n	8006012 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d103      	bne.n	8005ff2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fe f98c 	bl	8004308 <vPortFree>
	}
 8005ff0:	e00f      	b.n	8006012 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d00a      	beq.n	8006012 <prvDeleteTCB+0x56>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	60fb      	str	r3, [r7, #12]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <prvDeleteTCB+0x54>
	}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006022:	4b0e      	ldr	r3, [pc, #56]	; (800605c <prvResetNextTaskUnblockTime+0x40>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <prvResetNextTaskUnblockTime+0x14>
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <prvResetNextTaskUnblockTime+0x16>
 8006030:	2300      	movs	r3, #0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006036:	4b0a      	ldr	r3, [pc, #40]	; (8006060 <prvResetNextTaskUnblockTime+0x44>)
 8006038:	f04f 32ff 	mov.w	r2, #4294967295
 800603c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800603e:	e008      	b.n	8006052 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <prvResetNextTaskUnblockTime+0x40>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4a04      	ldr	r2, [pc, #16]	; (8006060 <prvResetNextTaskUnblockTime+0x44>)
 8006050:	6013      	str	r3, [r2, #0]
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr
 800605c:	200017c0 	.word	0x200017c0
 8006060:	20001828 	.word	0x20001828

08006064 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <xTaskGetSchedulerState+0x34>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006072:	2301      	movs	r3, #1
 8006074:	607b      	str	r3, [r7, #4]
 8006076:	e008      	b.n	800608a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006078:	4b08      	ldr	r3, [pc, #32]	; (800609c <xTaskGetSchedulerState+0x38>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006080:	2302      	movs	r3, #2
 8006082:	607b      	str	r3, [r7, #4]
 8006084:	e001      	b.n	800608a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006086:	2300      	movs	r3, #0
 8006088:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800608a:	687b      	ldr	r3, [r7, #4]
	}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	bc80      	pop	{r7}
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	20001814 	.word	0x20001814
 800609c:	20001830 	.word	0x20001830

080060a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d056      	beq.n	8006164 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060b6:	4b2e      	ldr	r3, [pc, #184]	; (8006170 <xTaskPriorityDisinherit+0xd0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d00a      	beq.n	80060d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	60fb      	str	r3, [r7, #12]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	60bb      	str	r3, [r7, #8]
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f8:	1e5a      	subs	r2, r3, #1
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006106:	429a      	cmp	r2, r3
 8006108:	d02c      	beq.n	8006164 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610e:	2b00      	cmp	r3, #0
 8006110:	d128      	bne.n	8006164 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	3304      	adds	r3, #4
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fa90 	bl	800463c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <xTaskPriorityDisinherit+0xd4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d903      	bls.n	8006144 <xTaskPriorityDisinherit+0xa4>
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	4a0c      	ldr	r2, [pc, #48]	; (8006174 <xTaskPriorityDisinherit+0xd4>)
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4a09      	ldr	r2, [pc, #36]	; (8006178 <xTaskPriorityDisinherit+0xd8>)
 8006152:	441a      	add	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f7fe fa13 	bl	8004586 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006160:	2301      	movs	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006164:	697b      	ldr	r3, [r7, #20]
	}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20001334 	.word	0x20001334
 8006174:	20001810 	.word	0x20001810
 8006178:	20001338 	.word	0x20001338

0800617c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006186:	4b21      	ldr	r3, [pc, #132]	; (800620c <prvAddCurrentTaskToDelayedList+0x90>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800618c:	4b20      	ldr	r3, [pc, #128]	; (8006210 <prvAddCurrentTaskToDelayedList+0x94>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3304      	adds	r3, #4
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fa52 	bl	800463c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d10a      	bne.n	80061b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a6:	4b1a      	ldr	r3, [pc, #104]	; (8006210 <prvAddCurrentTaskToDelayedList+0x94>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4819      	ldr	r0, [pc, #100]	; (8006214 <prvAddCurrentTaskToDelayedList+0x98>)
 80061b0:	f7fe f9e9 	bl	8004586 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061b4:	e026      	b.n	8006204 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4413      	add	r3, r2
 80061bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061be:	4b14      	ldr	r3, [pc, #80]	; (8006210 <prvAddCurrentTaskToDelayedList+0x94>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d209      	bcs.n	80061e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ce:	4b12      	ldr	r3, [pc, #72]	; (8006218 <prvAddCurrentTaskToDelayedList+0x9c>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <prvAddCurrentTaskToDelayedList+0x94>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f7fe f9f6 	bl	80045cc <vListInsert>
}
 80061e0:	e010      	b.n	8006204 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e2:	4b0e      	ldr	r3, [pc, #56]	; (800621c <prvAddCurrentTaskToDelayedList+0xa0>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fe f9ec 	bl	80045cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061f4:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d202      	bcs.n	8006204 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061fe:	4a08      	ldr	r2, [pc, #32]	; (8006220 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	6013      	str	r3, [r2, #0]
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	2000180c 	.word	0x2000180c
 8006210:	20001334 	.word	0x20001334
 8006214:	200017f4 	.word	0x200017f4
 8006218:	200017c4 	.word	0x200017c4
 800621c:	200017c0 	.word	0x200017c0
 8006220:	20001828 	.word	0x20001828

08006224 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08a      	sub	sp, #40	; 0x28
 8006228:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800622a:	2300      	movs	r3, #0
 800622c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800622e:	f000 facb 	bl	80067c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <xTimerCreateTimerTask+0x80>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d021      	beq.n	800627e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006242:	1d3a      	adds	r2, r7, #4
 8006244:	f107 0108 	add.w	r1, r7, #8
 8006248:	f107 030c 	add.w	r3, r7, #12
 800624c:	4618      	mov	r0, r3
 800624e:	f7fd ff7d 	bl	800414c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	9202      	str	r2, [sp, #8]
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	2302      	movs	r3, #2
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	2300      	movs	r3, #0
 8006262:	460a      	mov	r2, r1
 8006264:	4910      	ldr	r1, [pc, #64]	; (80062a8 <xTimerCreateTimerTask+0x84>)
 8006266:	4811      	ldr	r0, [pc, #68]	; (80062ac <xTimerCreateTimerTask+0x88>)
 8006268:	f7ff f8e4 	bl	8005434 <xTaskCreateStatic>
 800626c:	4603      	mov	r3, r0
 800626e:	4a10      	ldr	r2, [pc, #64]	; (80062b0 <xTimerCreateTimerTask+0x8c>)
 8006270:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006272:	4b0f      	ldr	r3, [pc, #60]	; (80062b0 <xTimerCreateTimerTask+0x8c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800627a:	2301      	movs	r3, #1
 800627c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	613b      	str	r3, [r7, #16]
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800629a:	697b      	ldr	r3, [r7, #20]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20001864 	.word	0x20001864
 80062a8:	08006920 	.word	0x08006920
 80062ac:	080063d1 	.word	0x080063d1
 80062b0:	20001868 	.word	0x20001868

080062b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	; 0x28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	623b      	str	r3, [r7, #32]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062e2:	4b1a      	ldr	r3, [pc, #104]	; (800634c <xTimerGenericCommand+0x98>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d02a      	beq.n	8006340 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b05      	cmp	r3, #5
 80062fa:	dc18      	bgt.n	800632e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062fc:	f7ff feb2 	bl	8006064 <xTaskGetSchedulerState>
 8006300:	4603      	mov	r3, r0
 8006302:	2b02      	cmp	r3, #2
 8006304:	d109      	bne.n	800631a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <xTimerGenericCommand+0x98>)
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	f107 0110 	add.w	r1, r7, #16
 800630e:	2300      	movs	r3, #0
 8006310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006312:	f7fe fcad 	bl	8004c70 <xQueueGenericSend>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24
 8006318:	e012      	b.n	8006340 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800631a:	4b0c      	ldr	r3, [pc, #48]	; (800634c <xTimerGenericCommand+0x98>)
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	f107 0110 	add.w	r1, r7, #16
 8006322:	2300      	movs	r3, #0
 8006324:	2200      	movs	r2, #0
 8006326:	f7fe fca3 	bl	8004c70 <xQueueGenericSend>
 800632a:	6278      	str	r0, [r7, #36]	; 0x24
 800632c:	e008      	b.n	8006340 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800632e:	4b07      	ldr	r3, [pc, #28]	; (800634c <xTimerGenericCommand+0x98>)
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	f107 0110 	add.w	r1, r7, #16
 8006336:	2300      	movs	r3, #0
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	f7fe fd97 	bl	8004e6c <xQueueGenericSendFromISR>
 800633e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006342:	4618      	mov	r0, r3
 8006344:	3728      	adds	r7, #40	; 0x28
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20001864 	.word	0x20001864

08006350 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af02      	add	r7, sp, #8
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800635a:	4b1c      	ldr	r3, [pc, #112]	; (80063cc <prvProcessExpiredTimer+0x7c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	3304      	adds	r3, #4
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe f967 	bl	800463c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d122      	bne.n	80063bc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	18d1      	adds	r1, r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	6978      	ldr	r0, [r7, #20]
 8006384:	f000 f8c8 	bl	8006518 <prvInsertTimerInActiveList>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d016      	beq.n	80063bc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800638e:	2300      	movs	r3, #0
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	2300      	movs	r3, #0
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	2100      	movs	r1, #0
 8006398:	6978      	ldr	r0, [r7, #20]
 800639a:	f7ff ff8b 	bl	80062b4 <xTimerGenericCommand>
 800639e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	60fb      	str	r3, [r7, #12]
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	6978      	ldr	r0, [r7, #20]
 80063c2:	4798      	blx	r3
}
 80063c4:	bf00      	nop
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	2000185c 	.word	0x2000185c

080063d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063d8:	f107 0308 	add.w	r3, r7, #8
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 f857 	bl	8006490 <prvGetNextExpireTime>
 80063e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4619      	mov	r1, r3
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f803 	bl	80063f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063ee:	f000 f8d5 	bl	800659c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063f2:	e7f1      	b.n	80063d8 <prvTimerTask+0x8>

080063f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063fe:	f7ff fa4b 	bl	8005898 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006402:	f107 0308 	add.w	r3, r7, #8
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f866 	bl	80064d8 <prvSampleTimeNow>
 800640c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d130      	bne.n	8006476 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <prvProcessTimerOrBlockTask+0x3c>
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	429a      	cmp	r2, r3
 8006420:	d806      	bhi.n	8006430 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006422:	f7ff fa47 	bl	80058b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006426:	68f9      	ldr	r1, [r7, #12]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff ff91 	bl	8006350 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800642e:	e024      	b.n	800647a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d008      	beq.n	8006448 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006436:	4b13      	ldr	r3, [pc, #76]	; (8006484 <prvProcessTimerOrBlockTask+0x90>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	bf0c      	ite	eq
 8006440:	2301      	moveq	r3, #1
 8006442:	2300      	movne	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006448:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <prvProcessTimerOrBlockTask+0x94>)
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	4619      	mov	r1, r3
 8006456:	f7fe ffb9 	bl	80053cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800645a:	f7ff fa2b 	bl	80058b4 <xTaskResumeAll>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006464:	4b09      	ldr	r3, [pc, #36]	; (800648c <prvProcessTimerOrBlockTask+0x98>)
 8006466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	f3bf 8f6f 	isb	sy
}
 8006474:	e001      	b.n	800647a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006476:	f7ff fa1d 	bl	80058b4 <xTaskResumeAll>
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20001860 	.word	0x20001860
 8006488:	20001864 	.word	0x20001864
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006498:	4b0e      	ldr	r3, [pc, #56]	; (80064d4 <prvGetNextExpireTime+0x44>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bf0c      	ite	eq
 80064a2:	2301      	moveq	r3, #1
 80064a4:	2300      	movne	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d105      	bne.n	80064c2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064b6:	4b07      	ldr	r3, [pc, #28]	; (80064d4 <prvGetNextExpireTime+0x44>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e001      	b.n	80064c6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064c6:	68fb      	ldr	r3, [r7, #12]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc80      	pop	{r7}
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	2000185c 	.word	0x2000185c

080064d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064e0:	f7ff fa86 	bl	80059f0 <xTaskGetTickCount>
 80064e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064e6:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <prvSampleTimeNow+0x3c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d205      	bcs.n	80064fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064f0:	f000 f908 	bl	8006704 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e002      	b.n	8006502 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006502:	4a04      	ldr	r2, [pc, #16]	; (8006514 <prvSampleTimeNow+0x3c>)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006508:	68fb      	ldr	r3, [r7, #12]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	2000186c 	.word	0x2000186c

08006518 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	429a      	cmp	r2, r3
 800653c:	d812      	bhi.n	8006564 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	1ad2      	subs	r2, r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	429a      	cmp	r2, r3
 800654a:	d302      	bcc.n	8006552 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800654c:	2301      	movs	r3, #1
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	e01b      	b.n	800658a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006552:	4b10      	ldr	r3, [pc, #64]	; (8006594 <prvInsertTimerInActiveList+0x7c>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3304      	adds	r3, #4
 800655a:	4619      	mov	r1, r3
 800655c:	4610      	mov	r0, r2
 800655e:	f7fe f835 	bl	80045cc <vListInsert>
 8006562:	e012      	b.n	800658a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d206      	bcs.n	800657a <prvInsertTimerInActiveList+0x62>
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d302      	bcc.n	800657a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006574:	2301      	movs	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e007      	b.n	800658a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800657a:	4b07      	ldr	r3, [pc, #28]	; (8006598 <prvInsertTimerInActiveList+0x80>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3304      	adds	r3, #4
 8006582:	4619      	mov	r1, r3
 8006584:	4610      	mov	r0, r2
 8006586:	f7fe f821 	bl	80045cc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800658a:	697b      	ldr	r3, [r7, #20]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20001860 	.word	0x20001860
 8006598:	2000185c 	.word	0x2000185c

0800659c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08e      	sub	sp, #56	; 0x38
 80065a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065a2:	e09d      	b.n	80066e0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da18      	bge.n	80065dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065aa:	1d3b      	adds	r3, r7, #4
 80065ac:	3304      	adds	r3, #4
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10a      	bne.n	80065cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	61fb      	str	r3, [r7, #28]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d2:	6850      	ldr	r0, [r2, #4]
 80065d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d6:	6892      	ldr	r2, [r2, #8]
 80065d8:	4611      	mov	r1, r2
 80065da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	db7d      	blt.n	80066de <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d004      	beq.n	80065f8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	3304      	adds	r3, #4
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe f822 	bl	800463c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065f8:	463b      	mov	r3, r7
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff ff6c 	bl	80064d8 <prvSampleTimeNow>
 8006600:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b09      	cmp	r3, #9
 8006606:	d86b      	bhi.n	80066e0 <prvProcessReceivedCommands+0x144>
 8006608:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <prvProcessReceivedCommands+0x74>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006639 	.word	0x08006639
 8006614:	08006639 	.word	0x08006639
 8006618:	08006639 	.word	0x08006639
 800661c:	080066e1 	.word	0x080066e1
 8006620:	08006695 	.word	0x08006695
 8006624:	080066cd 	.word	0x080066cd
 8006628:	08006639 	.word	0x08006639
 800662c:	08006639 	.word	0x08006639
 8006630:	080066e1 	.word	0x080066e1
 8006634:	08006695 	.word	0x08006695
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	18d1      	adds	r1, r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006646:	f7ff ff67 	bl	8006518 <prvInsertTimerInActiveList>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d047      	beq.n	80066e0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006656:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d13f      	bne.n	80066e0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	441a      	add	r2, r3
 8006668:	2300      	movs	r3, #0
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	2100      	movs	r1, #0
 8006670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006672:	f7ff fe1f 	bl	80062b4 <xTimerGenericCommand>
 8006676:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d130      	bne.n	80066e0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	61bb      	str	r3, [r7, #24]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	617b      	str	r3, [r7, #20]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	699a      	ldr	r2, [r3, #24]
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	18d1      	adds	r1, r2, r3
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066c6:	f7ff ff27 	bl	8006518 <prvInsertTimerInActiveList>
					break;
 80066ca:	e009      	b.n	80066e0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80066d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066d8:	f7fd fe16 	bl	8004308 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066dc:	e000      	b.n	80066e0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80066de:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066e0:	4b07      	ldr	r3, [pc, #28]	; (8006700 <prvProcessReceivedCommands+0x164>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	1d39      	adds	r1, r7, #4
 80066e6:	2200      	movs	r2, #0
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fe fc57 	bl	8004f9c <xQueueReceive>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f47f af57 	bne.w	80065a4 <prvProcessReceivedCommands+0x8>
	}
}
 80066f6:	bf00      	nop
 80066f8:	bf00      	nop
 80066fa:	3730      	adds	r7, #48	; 0x30
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20001864 	.word	0x20001864

08006704 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800670a:	e045      	b.n	8006798 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800670c:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <prvSwitchTimerLists+0xbc>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006716:	4b2a      	ldr	r3, [pc, #168]	; (80067c0 <prvSwitchTimerLists+0xbc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3304      	adds	r3, #4
 8006724:	4618      	mov	r0, r3
 8006726:	f7fd ff89 	bl	800463c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d12e      	bne.n	8006798 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	429a      	cmp	r2, r3
 800674a:	d90e      	bls.n	800676a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006758:	4b19      	ldr	r3, [pc, #100]	; (80067c0 <prvSwitchTimerLists+0xbc>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3304      	adds	r3, #4
 8006760:	4619      	mov	r1, r3
 8006762:	4610      	mov	r0, r2
 8006764:	f7fd ff32 	bl	80045cc <vListInsert>
 8006768:	e016      	b.n	8006798 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800676a:	2300      	movs	r3, #0
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	2300      	movs	r3, #0
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	2100      	movs	r1, #0
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff fd9d 	bl	80062b4 <xTimerGenericCommand>
 800677a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	603b      	str	r3, [r7, #0]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006798:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <prvSwitchTimerLists+0xbc>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1b4      	bne.n	800670c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067a2:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <prvSwitchTimerLists+0xbc>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067a8:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <prvSwitchTimerLists+0xc0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a04      	ldr	r2, [pc, #16]	; (80067c0 <prvSwitchTimerLists+0xbc>)
 80067ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067b0:	4a04      	ldr	r2, [pc, #16]	; (80067c4 <prvSwitchTimerLists+0xc0>)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	6013      	str	r3, [r2, #0]
}
 80067b6:	bf00      	nop
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	2000185c 	.word	0x2000185c
 80067c4:	20001860 	.word	0x20001860

080067c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067ce:	f7fe f84d 	bl	800486c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067d2:	4b15      	ldr	r3, [pc, #84]	; (8006828 <prvCheckForValidListAndQueue+0x60>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d120      	bne.n	800681c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067da:	4814      	ldr	r0, [pc, #80]	; (800682c <prvCheckForValidListAndQueue+0x64>)
 80067dc:	f7fd fea8 	bl	8004530 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067e0:	4813      	ldr	r0, [pc, #76]	; (8006830 <prvCheckForValidListAndQueue+0x68>)
 80067e2:	f7fd fea5 	bl	8004530 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067e6:	4b13      	ldr	r3, [pc, #76]	; (8006834 <prvCheckForValidListAndQueue+0x6c>)
 80067e8:	4a10      	ldr	r2, [pc, #64]	; (800682c <prvCheckForValidListAndQueue+0x64>)
 80067ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067ec:	4b12      	ldr	r3, [pc, #72]	; (8006838 <prvCheckForValidListAndQueue+0x70>)
 80067ee:	4a10      	ldr	r2, [pc, #64]	; (8006830 <prvCheckForValidListAndQueue+0x68>)
 80067f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067f2:	2300      	movs	r3, #0
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	4b11      	ldr	r3, [pc, #68]	; (800683c <prvCheckForValidListAndQueue+0x74>)
 80067f8:	4a11      	ldr	r2, [pc, #68]	; (8006840 <prvCheckForValidListAndQueue+0x78>)
 80067fa:	2110      	movs	r1, #16
 80067fc:	200a      	movs	r0, #10
 80067fe:	f7fe f99d 	bl	8004b3c <xQueueGenericCreateStatic>
 8006802:	4603      	mov	r3, r0
 8006804:	4a08      	ldr	r2, [pc, #32]	; (8006828 <prvCheckForValidListAndQueue+0x60>)
 8006806:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006808:	4b07      	ldr	r3, [pc, #28]	; (8006828 <prvCheckForValidListAndQueue+0x60>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <prvCheckForValidListAndQueue+0x60>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	490b      	ldr	r1, [pc, #44]	; (8006844 <prvCheckForValidListAndQueue+0x7c>)
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fdb0 	bl	800537c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800681c:	f7fe f856 	bl	80048cc <vPortExitCritical>
}
 8006820:	bf00      	nop
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20001864 	.word	0x20001864
 800682c:	20001834 	.word	0x20001834
 8006830:	20001848 	.word	0x20001848
 8006834:	2000185c 	.word	0x2000185c
 8006838:	20001860 	.word	0x20001860
 800683c:	20001910 	.word	0x20001910
 8006840:	20001870 	.word	0x20001870
 8006844:	08006928 	.word	0x08006928

08006848 <__libc_init_array>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	2600      	movs	r6, #0
 800684c:	4d0c      	ldr	r5, [pc, #48]	; (8006880 <__libc_init_array+0x38>)
 800684e:	4c0d      	ldr	r4, [pc, #52]	; (8006884 <__libc_init_array+0x3c>)
 8006850:	1b64      	subs	r4, r4, r5
 8006852:	10a4      	asrs	r4, r4, #2
 8006854:	42a6      	cmp	r6, r4
 8006856:	d109      	bne.n	800686c <__libc_init_array+0x24>
 8006858:	f000 f830 	bl	80068bc <_init>
 800685c:	2600      	movs	r6, #0
 800685e:	4d0a      	ldr	r5, [pc, #40]	; (8006888 <__libc_init_array+0x40>)
 8006860:	4c0a      	ldr	r4, [pc, #40]	; (800688c <__libc_init_array+0x44>)
 8006862:	1b64      	subs	r4, r4, r5
 8006864:	10a4      	asrs	r4, r4, #2
 8006866:	42a6      	cmp	r6, r4
 8006868:	d105      	bne.n	8006876 <__libc_init_array+0x2e>
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006870:	4798      	blx	r3
 8006872:	3601      	adds	r6, #1
 8006874:	e7ee      	b.n	8006854 <__libc_init_array+0xc>
 8006876:	f855 3b04 	ldr.w	r3, [r5], #4
 800687a:	4798      	blx	r3
 800687c:	3601      	adds	r6, #1
 800687e:	e7f2      	b.n	8006866 <__libc_init_array+0x1e>
 8006880:	0800696c 	.word	0x0800696c
 8006884:	0800696c 	.word	0x0800696c
 8006888:	0800696c 	.word	0x0800696c
 800688c:	08006970 	.word	0x08006970

08006890 <memcpy>:
 8006890:	440a      	add	r2, r1
 8006892:	4291      	cmp	r1, r2
 8006894:	f100 33ff 	add.w	r3, r0, #4294967295
 8006898:	d100      	bne.n	800689c <memcpy+0xc>
 800689a:	4770      	bx	lr
 800689c:	b510      	push	{r4, lr}
 800689e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068a2:	4291      	cmp	r1, r2
 80068a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068a8:	d1f9      	bne.n	800689e <memcpy+0xe>
 80068aa:	bd10      	pop	{r4, pc}

080068ac <memset>:
 80068ac:	4603      	mov	r3, r0
 80068ae:	4402      	add	r2, r0
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d100      	bne.n	80068b6 <memset+0xa>
 80068b4:	4770      	bx	lr
 80068b6:	f803 1b01 	strb.w	r1, [r3], #1
 80068ba:	e7f9      	b.n	80068b0 <memset+0x4>

080068bc <_init>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	bf00      	nop
 80068c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c2:	bc08      	pop	{r3}
 80068c4:	469e      	mov	lr, r3
 80068c6:	4770      	bx	lr

080068c8 <_fini>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	bf00      	nop
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr
